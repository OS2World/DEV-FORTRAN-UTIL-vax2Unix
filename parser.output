

Terminals which are not used:

   IGNORE_THIS_TOKEN
   IF_THEN_STATEMENT
   UNIT_IDENT
   LAST_DEFINED_TOKEN


Conflict in state 221 between rule 142 and token CONCAT resolved as reduce.
Conflict in state 221 between rule 142 and token LOGICAL_OP resolved as reduce.
Conflict in state 221 between rule 142 and token ADD_OP resolved as shift.
Conflict in state 221 between rule 142 and token MUL_OP resolved as shift.
Conflict in state 221 between rule 142 and token EXP_OP resolved as shift.
Conflict in state 339 between rule 144 and token CONCAT resolved as shift.
Conflict in state 339 between rule 144 and token LOGICAL_OP resolved as shift.
Conflict in state 339 between rule 144 and token ADD_OP resolved as shift.
Conflict in state 339 between rule 144 and token MUL_OP resolved as shift.
Conflict in state 339 between rule 144 and token EXP_OP resolved as shift.
Conflict in state 340 between rule 141 and token CONCAT resolved as reduce.
Conflict in state 340 between rule 141 and token LOGICAL_OP resolved as reduce.
Conflict in state 340 between rule 141 and token ADD_OP resolved as shift.
Conflict in state 340 between rule 141 and token MUL_OP resolved as shift.
Conflict in state 340 between rule 141 and token EXP_OP resolved as shift.
Conflict in state 341 between rule 139 and token CONCAT resolved as reduce.
Conflict in state 341 between rule 139 and token LOGICAL_OP resolved as reduce.
Conflict in state 341 between rule 139 and token ADD_OP resolved as reduce.
Conflict in state 341 between rule 139 and token MUL_OP resolved as shift.
Conflict in state 341 between rule 139 and token EXP_OP resolved as shift.
Conflict in state 342 between rule 140 and token CONCAT resolved as reduce.
Conflict in state 342 between rule 140 and token LOGICAL_OP resolved as reduce.
Conflict in state 342 between rule 140 and token ADD_OP resolved as reduce.
Conflict in state 342 between rule 140 and token MUL_OP resolved as reduce.
Conflict in state 342 between rule 140 and token EXP_OP resolved as shift.
Conflict in state 343 between rule 143 and token CONCAT resolved as reduce.
Conflict in state 343 between rule 143 and token LOGICAL_OP resolved as reduce.
Conflict in state 343 between rule 143 and token ADD_OP resolved as reduce.
Conflict in state 343 between rule 143 and token MUL_OP resolved as reduce.
Conflict in state 343 between rule 143 and token EXP_OP resolved as shift.
Conflict in state 363 between rule 124 and token COMMA resolved as shift.

Grammar
rule 1    fake_statement ->		/* empty */
rule 2    fake_statement -> fake_statement statement
rule 3    statement -> include_statement
rule 4    statement -> format_statement
rule 5    statement -> open_statement
rule 6    statement -> encode_decode_statement
rule 7    statement -> io_statement
rule 8    statement -> pass_statement
rule 9    statement -> if_statement
rule 10   statement -> else_statement
rule 11   statement -> comment_statement_out
rule 12   statement -> goto_statement
rule 13   statement -> computed_goto_statement
rule 14   statement -> common_statement
rule 15   statement -> dimension_statement
rule 16   statement -> implicit_statement
rule 17   statement -> intrinsic_or_extern_statement
rule 18   statement -> type_definition_statement
rule 19   statement -> equivalence_statement
rule 20   statement -> function_statement
rule 21   statement -> subroutine_statement
rule 22   statement -> namelist_statement
rule 23   statement -> parameter_statement
rule 24   statement -> data_statement
rule 25   statement -> arithmetic_statement
rule 26   statement -> global_function_statement
rule 27   statement -> global_subroutine_statement
rule 28   statement -> global_common_statement
rule 29   statement -> do_statement
rule 30   statement -> end_do_statement
rule 31   statement -> end_if_statement
rule 32   statement -> END_OF_PROGRAM
rule 33   statement -> END_OF_STATEMENT
rule 34   statement -> error END_OF_STATEMENT
rule 35   statement -> SPECIFICATION_COMPLETE
rule 36   global_function_statement -> GLOBAL_FUNCTION VARIABLE_NAME STAR VARIABLE_NAME STAR signed_integer global_call_spec END_OF_STATEMENT
rule 37   global_call_spec -> L_PAREN R_PAREN
rule 38   global_call_spec -> L_PAREN global_arg_list R_PAREN
rule 39   global_arg_list -> global_arg_item
rule 40   global_arg_list -> global_arg_list COMMA global_arg_item
rule 41   global_arg_item -> VARIABLE_NAME STAR signed_integer
rule 42   global_arg_item -> global_arg_item COLON INTEGER_CONSTANT STAR INTEGER_CONSTANT
rule 43   signed_integer -> INTEGER_CONSTANT
rule 44   signed_integer -> ADD_OP INTEGER_CONSTANT
rule 45   global_subroutine_statement -> GLOBAL_SUBROUTINE VARIABLE_NAME global_call_spec END_OF_STATEMENT
rule 46   global_common_statement -> GLOBAL_COMMON SLASH VARIABLE_NAME SLASH global_common_list END_OF_STATEMENT
rule 47   global_common_statement -> GLOBAL_COMMON SLASH SLASH global_common_list END_OF_STATEMENT
rule 48   global_common_list -> global_common_item
rule 49   global_common_list -> global_common_list global_common_item
rule 50   global_common_item -> VARIABLE_NAME STAR INTEGER_CONSTANT STAR INTEGER_CONSTANT
rule 51   pass_statement -> PASS_STATEMENT_T pass_text END_OF_STATEMENT
rule 52   pass_statement -> PASS_STATEMENT_T END_OF_STATEMENT
rule 53   if_statement -> base_if INTEGER_CONSTANT COMMA INTEGER_CONSTANT COMMA INTEGER_CONSTANT END_OF_STATEMENT
rule 54   if_statement -> base_if THEN_T END_OF_STATEMENT
rule 55   if_statement -> base_if pass_text END_OF_STATEMENT
rule 56   base_if -> if_statement_start if_arguement R_PAREN
rule 57   base_if -> if_statement_start logical_arguement R_PAREN
rule 58   if_statement_start -> IF_STATEMENT
rule 59   if_statement_start -> ELSE_IF_STATEMENT
rule 60   logical_arguement -> if_arguement RELATIONAL_OP_T if_arguement
rule 61   logical_arguement -> logical_arguement RELATIONAL_OP_T if_arguement
rule 62   if_arguement -> IF_ARGUEMENT
rule 63   if_arguement -> string
rule 64   if_arguement -> if_arguement string
rule 65   if_arguement -> if_arguement IF_ARGUEMENT
rule 66   else_statement -> ELSE_STATEMENT END_OF_STATEMENT
rule 67   comment_statement_out -> COMMENT_STATEMENT_OUT END_OF_STATEMENT
rule 68   comment_statement_out -> COMMENT_STATEMENT_OUT pass_text END_OF_STATEMENT
rule 69   open_statement -> OPEN_STATEMENT_T open_arg2 R_PAREN END_OF_STATEMENT
rule 70   open_arg2 -> open_arg
rule 71   open_arg -> open_pass
rule 72   open_arg -> INTEGER_CONSTANT
rule 73   open_arg -> open_dump
rule 74   open_arg -> open_arg COMMA open_pass
rule 75   open_arg -> open_arg COMMA INTEGER_CONSTANT
rule 76   open_arg -> open_arg COMMA open_dump
rule 77   open_dump -> OPEN_DUMP pass_text
rule 78   open_dump -> OPEN_DUMP
rule 79   open_pass -> OPEN_PASS pass_text
rule 80   open_pass -> OPEN_PASS pass_text QUOTE
rule 81   open_pass -> OPEN_PASS
rule 82   encode_decode_statement -> ENCODE_DECODE L_PAREN expression COMMA format_spec COMMA encode_optional R_PAREN pass_text END_OF_STATEMENT
rule 83   encode_decode_statement -> ENCODE_DECODE L_PAREN expression COMMA format_spec COMMA encode_optional R_PAREN END_OF_STATEMENT
rule 84   format_spec -> INTEGER_CONSTANT
rule 85   format_spec -> VARIABLE_NAME
rule 86   encode_optional -> encode_optional2
rule 87   encode_optional -> encode_optional COMMA VARIABLE_NAME EQUALS VARIABLE_NAME
rule 88   encode_optional -> encode_optional COMMA VARIABLE_NAME EQUALS INTEGER_CONSTANT
rule 89   encode_optional2 -> VARIABLE_NAME
rule 90   encode_optional2 -> paren_ref
rule 91   encode_optional2 -> substring
rule 92   io_statement -> io_control_list END_OF_STATEMENT
rule 93   io_statement -> io_control_list pass_text END_OF_STATEMENT
rule 94   io_control_list -> io_control_list_nonkey R_PAREN
rule 95   io_control_list -> io_control_list_key R_PAREN
rule 96   io_control_list_nonkey -> IO_STATEMENT expression
rule 97   io_control_list_nonkey -> IO_STATEMENT MUL_OP
rule 98   io_control_list_nonkey -> io_control_list_nonkey COMMA MUL_OP
rule 99   io_control_list_nonkey -> IO_STATEMENT expression APOS expression
rule 100  io_control_list_nonkey -> io_control_list_nonkey COMMA expression
rule 101  io_control_list_key -> IO_STATEMENT io_param
rule 102  io_control_list_key -> io_control_list_key COMMA io_param
rule 103  io_control_list_key -> io_control_list_nonkey COMMA io_param
rule 104  io_param -> IO_PARAM_NAME EQUALS pass_text
rule 105  io_param -> IO_PARAM_NAME EQUALS string
rule 106  include_statement -> INCLUDE_T L_PAREN PASS_TEXT R_PAREN QUOTE END_OF_STATEMENT
rule 107  include_statement -> INCLUDE_T pass_text L_PAREN PASS_TEXT R_PAREN QUOTE END_OF_STATEMENT
rule 108  include_statement -> INCLUDE_T PASS_TEXT QUOTE END_OF_STATEMENT
rule 109  format_statement -> FORMAT_STATEMENT pass_text END_OF_STATEMENT
rule 110  do_statement -> DO_STATEMENT do_limit pass_text END_OF_STATEMENT
rule 111  do_statement -> DO_STATEMENT pass_text END_OF_STATEMENT
rule 112  do_limit -> INTEGER_CONSTANT
rule 113  do_limit -> INTEGER_CONSTANT COMMA
rule 114  end_do_statement -> END_DO_STATEMENT END_OF_STATEMENT
rule 115  end_do_statement -> END_DO_STATEMENT pass_text END_OF_STATEMENT
rule 116  end_if_statement -> END_IF_STATEMENT END_OF_STATEMENT
rule 117  end_if_statement -> END_IF_STATEMENT pass_text END_OF_STATEMENT
rule 118  pass_text -> PASS_TEXT
rule 119  pass_text -> pass_text PASS_TEXT
rule 120  arg_list -> expression
rule 121  arg_list -> arg_list COMMA expression
rule 122  arg_list -> arg_list COMMA COMMA
rule 123  arg_list -> arg_list COMMA COMMA expression
rule 124  arg_list -> COMMA COMMA
rule 125  arg_list -> COMMA COMMA expression
rule 126  variable_reference -> REFERENCE L_PAREN expression R_PAREN
rule 127  paren_ref -> VARIABLE_NAME L_PAREN arg_list R_PAREN
rule 128  paren_ref -> VARIABLE_NAME L_PAREN R_PAREN
rule 129  paren_ref -> VARIABLE_NAME L_PAREN COMMA arg_list R_PAREN
rule 130  paren_ref -> VARIABLE_NAME L_PAREN COMMA arg_list COMMA R_PAREN
rule 131  paren_ref -> VARIABLE_NAME L_PAREN arg_list COMMA R_PAREN
rule 132  expression -> VARIABLE_NAME
rule 133  expression -> paren_ref
rule 134  expression -> operation VARIABLE_NAME
rule 135  expression -> operation paren_ref
rule 136  expression -> operation literal
rule 137  expression -> operation L_PAREN expression R_PAREN
rule 138  expression -> L_PAREN expression R_PAREN
rule 139  expression -> expression ADD_OP expression
rule 140  expression -> expression MUL_OP expression
rule 141  expression -> expression LOGICAL_OP expression
rule 142  expression -> LOGICAL_NOT expression
rule 143  expression -> expression EXP_OP expression
rule 144  expression -> expression CONCAT expression
rule 145  expression -> structure_ref
rule 146  expression -> literal
rule 147  expression -> variable_reference
rule 148  structure_ref -> VARIABLE_NAME DOT VARIABLE_NAME
rule 149  structure_ref -> structure_ref DOT VARIABLE_NAME
rule 150  structure_ref -> paren_ref DOT VARIABLE_NAME
rule 151  structure_ref -> paren_ref DOT paren_ref
rule 152  structure_ref -> VARIABLE_NAME DOT paren_ref
rule 153  operation -> ADD_OP
rule 154  operation -> MUL_OP
rule 155  operation -> SLASH
rule 156  operation -> STAR
rule 157  operation -> EXP_OP
rule 158  operation -> CONCAT
rule 159  string -> STRING_START string_element APOS
rule 160  string -> STRING_START APOS
rule 161  string -> substring
rule 162  string_element -> STRING_ELEMENT
rule 163  string_element -> string_element STRING_ELEMENT
rule 164  substring -> VARIABLE_NAME L_PAREN expression COLON expression R_PAREN
rule 165  substring -> VARIABLE_NAME L_PAREN COLON expression R_PAREN
rule 166  substring -> VARIABLE_NAME L_PAREN expression COLON R_PAREN
rule 167  substring -> paren_ref L_PAREN expression COLON expression R_PAREN
rule 168  substring -> paren_ref L_PAREN COLON expression R_PAREN
rule 169  substring -> paren_ref L_PAREN expression COLON R_PAREN
rule 170  literal -> INTEGER_CONSTANT
rule 171  literal -> string
rule 172  literal -> REAL_CONSTANT
rule 173  computed_goto_statement -> COMPUTED_GOTO_STATEMENT pass_text END_OF_STATEMENT
rule 174  base_type -> BYTE_TYPE
rule 175  base_type -> LOGICAL_TYPE
rule 176  base_type -> INTEGER_TYPE
rule 177  base_type -> REAL_TYPE
rule 178  base_type -> DOUBLE_TYPE
rule 179  base_type -> COMPLEX_TYPE
rule 180  base_type -> DOUBLE_COMPLEX_TYPE
rule 181  base_type -> CHARACTER_TYPE
rule 182  goto_statement -> GOTO_STATEMENT END_OF_STATEMENT
rule 183  implicit_statement -> IMPLICIT_STATEMENT implicit_specifier_list END_OF_STATEMENT
rule 184  implicit_specifier_list -> implicit_specifier_item
rule 185  implicit_specifier_list -> implicit_specifier_list COMMA implicit_specifier_item
rule 186  implicit_specifier_item -> type_specifier L_PAREN implicit_specifier_code_list R_PAREN
rule 187  implicit_specifier_code_list -> implicit_specifier_code
rule 188  implicit_specifier_code_list -> implicit_specifier_code COMMA implicit_specifier_code
rule 189  implicit_specifier_code -> CHAR
rule 190  implicit_specifier_code -> CHAR DASH CHAR
rule 191  intrinsic_or_extern_statement -> INTRINSIC_OR_EXTERN_STATEMENT variable_list END_OF_STATEMENT
rule 192  type_specifier -> base_type
rule 193  type_specifier -> base_type STAR INTEGER_CONSTANT
rule 194  type_specifier -> base_type STAR L_PAREN expression R_PAREN
rule 195  type_specifier -> base_type STAR L_PAREN STAR R_PAREN
rule 196  equivalence_statement -> EQUIVALENCE_STATEMENT equivalence_list END_OF_STATEMENT
rule 197  equivalence_statement -> EQUIVALENCE_STATEMENT COMMA equivalence_list END_OF_STATEMENT
rule 198  equivalence_list -> L_PAREN equivalence_group R_PAREN
rule 199  equivalence_list -> equivalence_list COMMA L_PAREN equivalence_group R_PAREN
rule 200  equivalence_group -> equivalence_item
rule 201  equivalence_group -> equivalence_group COMMA equivalence_item
rule 202  equivalence_item -> VARIABLE_NAME
rule 203  equivalence_item -> array_declarator
rule 204  dimension_statement -> DIMENSION_STATEMENT array_list END_OF_STATEMENT
rule 205  array_list -> array_declarator
rule 206  array_list -> array_list COMMA array_declarator
rule 207  array_declarator -> VARIABLE_NAME L_PAREN dimension_list R_PAREN
rule 208  dimension_list -> dimension_element
rule 209  dimension_list -> dimension_list COMMA dimension_element
rule 210  dimension_element -> dimension_atom
rule 211  dimension_element -> dimension_atom COLON dimension_atom
rule 212  dimension_atom -> INTEGER_CONSTANT
rule 213  dimension_atom -> VARIABLE_NAME
rule 214  dimension_atom -> dimension_atom operation INTEGER_CONSTANT
rule 215  dimension_atom -> dimension_atom operation VARIABLE_NAME
rule 216  dimension_atom -> ADD_OP INTEGER_CONSTANT
rule 217  dimension_atom -> ADD_OP VARIABLE_NAME
rule 218  type_definition_statement -> type_specifier type_variable_list END_OF_STATEMENT
rule 219  type_variable_list -> extended_type_variable_item
rule 220  type_variable_list -> type_variable_list COMMA extended_type_variable_item
rule 221  extended_type_variable_item -> type_variable_item
rule 222  extended_type_variable_item -> type_variable_item SLASH value_list SLASH
rule 223  type_variable_item -> VARIABLE_NAME
rule 224  type_variable_item -> array_declarator
rule 225  type_variable_item -> array_declarator STAR INTEGER_CONSTANT
rule 226  type_variable_item -> VARIABLE_NAME STAR INTEGER_CONSTANT
rule 227  type_variable_item -> VARIABLE_NAME STAR L_PAREN expression R_PAREN
rule 228  type_variable_item -> VARIABLE_NAME STAR L_PAREN STAR R_PAREN
rule 229  value_list -> value_element
rule 230  value_list -> value_list COMMA value_element
rule 231  value_element -> value_atom
rule 232  value_element -> value_atom STAR value_atom
rule 233  value_atom -> VARIABLE_NAME
rule 234  value_atom -> INTEGER_CONSTANT
rule 235  value_atom -> REAL_CONSTANT
rule 236  value_atom -> string
rule 237  common_statement -> COMMON_STATEMENT common_block_list END_OF_STATEMENT
rule 238  common_statement -> COMMON_STATEMENT common_item_list common_block_list END_OF_STATEMENT
rule 239  common_block_name -> SLASH VARIABLE_NAME SLASH common_item
rule 240  common_block_name -> SLASH SLASH common_item
rule 241  common_block_list -> common_block_name
rule 242  common_block_list -> common_block_list common_block_name
rule 243  common_block_list -> common_block_list COMMA common_block_name
rule 244  common_block_list -> common_block_list COMMA common_item
rule 245  common_item -> VARIABLE_NAME
rule 246  common_item -> array_declarator
rule 247  common_item_list -> common_item
rule 248  common_item_list -> common_item_list COMMA common_item
rule 249  function_statement -> FUNCTION base_function_spec END_OF_STATEMENT
rule 250  function_statement -> type_specifier FUNCTION base_function_spec END_OF_STATEMENT
rule 251  base_function_spec -> base_function_name
rule 252  base_function_spec -> base_function_name L_PAREN variable_list R_PAREN
rule 253  base_function_spec -> base_function_name L_PAREN R_PAREN
rule 254  base_function_name -> VARIABLE_NAME
rule 255  base_function_name -> VARIABLE_NAME STAR INTEGER_CONSTANT
rule 256  base_function_name -> VARIABLE_NAME STAR L_PAREN STAR R_PAREN
rule 257  variable_list -> variable_list_element
rule 258  variable_list -> variable_list COMMA variable_list_element
rule 259  variable_list_element -> VARIABLE_NAME
rule 260  variable_list_element -> STAR
rule 261  variable_list_element -> paren_ref
rule 262  variable_list_element -> structure_ref
rule 263  subroutine_statement -> SUBROUTINE VARIABLE_NAME L_PAREN variable_list R_PAREN END_OF_STATEMENT
rule 264  subroutine_statement -> SUBROUTINE VARIABLE_NAME END_OF_STATEMENT
rule 265  subroutine_statement -> SUBROUTINE VARIABLE_NAME L_PAREN R_PAREN END_OF_STATEMENT
rule 266  namelist_statement -> NAMELIST namelist_list END_OF_STATEMENT
rule 267  namelist_list -> namelist_group VARIABLE_NAME
rule 268  namelist_list -> namelist_list COMMA VARIABLE_NAME
rule 269  namelist_list -> namelist_list namelist_group VARIABLE_NAME
rule 270  namelist_list -> namelist_list COMMA namelist_group VARIABLE_NAME
rule 271  namelist_group -> SLASH VARIABLE_NAME SLASH
rule 272  parameter_statement -> PARAMETER vax_parameter_list END_OF_STATEMENT
rule 273  parameter_statement -> PARAMETER L_PAREN parameter_list R_PAREN END_OF_STATEMENT
rule 274  parameter_list -> VARIABLE_NAME EQUALS expression
rule 275  parameter_list -> parameter_list COMMA VARIABLE_NAME EQUALS expression
rule 276  vax_parameter_list -> VARIABLE_NAME EQUALS expression
rule 277  vax_parameter_list -> vax_parameter_list COMMA VARIABLE_NAME EQUALS expression
rule 278  arithmetic_statement -> VARIABLE_NAME EQUALS expression END_OF_STATEMENT
rule 279  arithmetic_statement -> substring EQUALS expression END_OF_STATEMENT
rule 280  arithmetic_statement -> paren_ref EQUALS expression END_OF_STATEMENT
rule 281  arithmetic_statement -> CALL paren_ref END_OF_STATEMENT
rule 282  arithmetic_statement -> CALL VARIABLE_NAME END_OF_STATEMENT
rule 283  arithmetic_statement -> structure_ref EQUALS expression END_OF_STATEMENT
rule 284  data_statement -> DATA pass_text END_OF_STATEMENT

Terminals, with rules where they appear

$ (-1)
error (256) 34
END_OF_STATEMENT (257) 33 34 36 45 46 47 51 52 53 54 55 66 67 68 69
    82 83 92 93 106 107 108 109 110 111 114 115 116 117 173 182 183
    191 196 197 204 218 237 238 249 250 263 264 265 266 272 273 278
    279 280 281 282 283 284
IGNORE_THIS_TOKEN (258)
INCLUDE_T (259) 106 107 108
FORMAT_STATEMENT (260) 109
PASS_STATEMENT_T (261) 51 52
OPEN_STATEMENT_T (262) 69
IO_STATEMENT (263) 96 97 99 101
PASS_TEXT (264) 106 107 108 118 119
EQUALS (265) 87 88 104 105 274 275 276 277 278 279 280 283
INTEGER_CONSTANT (266) 42 43 44 50 53 72 75 84 88 112 113 170 193 212
    214 216 225 226 234 255
REAL_CONSTANT (267) 172 235
L_PAREN (268) 37 38 82 83 106 107 126 127 128 129 130 131 137 138 164
    165 166 167 168 169 186 194 195 198 199 207 227 228 252 253 256
    263 265 273
R_PAREN (269) 37 38 56 57 69 82 83 94 95 106 107 126 127 128 129 130
    131 137 138 164 165 166 167 168 169 186 194 195 198 199 207 227
    228 252 253 256 263 265 273
COMMENT_STATEMENT_OUT (270) 67 68
IF_STATEMENT (271) 58
IF_THEN_STATEMENT (272)
ENCODE_DECODE (273) 82 83
ELSE_IF_STATEMENT (274) 59
RELATIONAL_OP_T (275) 60 61
IF_ARGUEMENT (276) 62 65
THEN_T (277) 54
ELSE_STATEMENT (278) 66
STRING_START (279) 159 160
STRING_ELEMENT (280) 162 163
END_OF_PROGRAM (281) 32
BYTE_TYPE (282) 174
LOGICAL_TYPE (283) 175
INTEGER_TYPE (284) 176
REAL_TYPE (285) 177
DOUBLE_TYPE (286) 178
COMPLEX_TYPE (287) 179
DOUBLE_COMPLEX_TYPE (288) 180
CHARACTER_TYPE (289) 181
OPEN_PASS (290) 79 80 81
OPEN_DUMP (291) 77 78
DO_STATEMENT (292) 110 111
END_DO_STATEMENT (293) 114 115
END_IF_STATEMENT (294) 116 117
GOTO_STATEMENT (295) 182
COMPUTED_GOTO_STATEMENT (296) 173
COMMON_STATEMENT (297) 237 238
INTRINSIC_OR_EXTERN_STATEMENT (298) 191
VARIABLE_NAME (299) 36 41 45 46 50 85 87 88 89 127 128 129 130 131
    132 134 148 149 150 152 164 165 166 202 207 213 215 217 223 226
    227 228 233 239 245 254 255 256 259 263 264 265 267 268 269 270
    271 274 275 276 277 278 282
IO_PARAM_NAME (300) 104 105
STAR (301) 36 41 42 50 156 193 194 195 225 226 227 228 232 255 256
    260
UNIT_IDENT (302)
APOS (303) 99 159 160
QUOTE (304) 80 106 107 108
COLON (305) 42 164 165 166 167 168 169 211
REFERENCE (306) 126
SPECIFICATION_COMPLETE (307) 35
CONCAT (308) 144 158
IMPLICIT_STATEMENT (309) 183
EQUIVALENCE_STATEMENT (310) 196 197
DIMENSION_STATEMENT (311) 204
FUNCTION (312) 249 250
SUBROUTINE (313) 263 264 265
NAMELIST (314) 266
PARAMETER (315) 272 273
DATA (316) 284
CALL (317) 281 282
CHAR (318) 189 190
DASH (319) 190
SLASH (320) 46 47 155 222 239 240 271
DOT (321) 148 149 150 151 152
GLOBAL_FUNCTION (322) 36
GLOBAL_SUBROUTINE (323) 45
GLOBAL_COMMON (324) 46 47
LOGICAL_OP (325) 141
LOGICAL_NOT (326) 142
ADD_OP (327) 44 139 153 216 217
MUL_OP (328) 97 98 140 154
EXP_OP (329) 143 157
COMMA (330) 40 53 74 75 76 82 83 87 88 98 100 102 103 113 121 122 123
    124 125 129 130 131 185 188 197 199 201 206 209 220 230 243 244
    248 258 268 270 275 277
LAST_DEFINED_TOKEN (331)

Nonterminals, with rules where they appear

fake_statement (78)
    on left: 1 2, on right: 2
statement (79)
    on left: 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
    24 25 26 27 28 29 30 31 32 33 34 35, on right: 2
global_function_statement (80)
    on left: 36, on right: 26
global_call_spec (81)
    on left: 37 38, on right: 36 45
global_arg_list (82)
    on left: 39 40, on right: 38 40
global_arg_item (83)
    on left: 41 42, on right: 39 40 42
signed_integer (84)
    on left: 43 44, on right: 36 41
global_subroutine_statement (85)
    on left: 45, on right: 27
global_common_statement (86)
    on left: 46 47, on right: 28
global_common_list (87)
    on left: 48 49, on right: 46 47 49
global_common_item (88)
    on left: 50, on right: 48 49
pass_statement (89)
    on left: 51 52, on right: 8
if_statement (90)
    on left: 53 54 55, on right: 9
base_if (91)
    on left: 56 57, on right: 53 54 55
if_statement_start (92)
    on left: 58 59, on right: 56 57
logical_arguement (93)
    on left: 60 61, on right: 57 61
if_arguement (94)
    on left: 62 63 64 65, on right: 56 60 61 64 65
else_statement (95)
    on left: 66, on right: 10
comment_statement_out (96)
    on left: 67 68, on right: 11
open_statement (97)
    on left: 69, on right: 5
open_arg2 (98)
    on left: 70, on right: 69
open_arg (99)
    on left: 71 72 73 74 75 76, on right: 70 74 75 76
open_dump (100)
    on left: 77 78, on right: 73 76
open_pass (101)
    on left: 79 80 81, on right: 71 74
encode_decode_statement (102)
    on left: 82 83, on right: 6
format_spec (103)
    on left: 84 85, on right: 82 83
encode_optional (104)
    on left: 86 87 88, on right: 82 83 87 88
encode_optional2 (105)
    on left: 89 90 91, on right: 86
io_statement (106)
    on left: 92 93, on right: 7
io_control_list (107)
    on left: 94 95, on right: 92 93
io_control_list_nonkey (108)
    on left: 96 97 98 99 100, on right: 94 98 100 103
io_control_list_key (109)
    on left: 101 102 103, on right: 95 102
io_param (110)
    on left: 104 105, on right: 101 102 103
include_statement (111)
    on left: 106 107 108, on right: 3
format_statement (112)
    on left: 109, on right: 4
do_statement (113)
    on left: 110 111, on right: 29
do_limit (114)
    on left: 112 113, on right: 110
end_do_statement (115)
    on left: 114 115, on right: 30
end_if_statement (116)
    on left: 116 117, on right: 31
pass_text (117)
    on left: 118 119, on right: 51 55 68 77 79 80 82 93 104 107 109
    110 111 115 117 119 173 284
arg_list (118)
    on left: 120 121 122 123 124 125, on right: 121 122 123 127 129
    130 131
variable_reference (119)
    on left: 126, on right: 147
paren_ref (120)
    on left: 127 128 129 130 131, on right: 90 133 135 150 151 152
    167 168 169 261 280 281
expression (121)
    on left: 132 133 134 135 136 137 138 139 140 141 142 143 144 145
    146 147, on right: 82 83 96 99 100 120 121 123 125 126 137 138
    139 140 141 142 143 144 164 165 166 167 168 169 194 227 274 275
    276 277 278 279 280 283
structure_ref (122)
    on left: 148 149 150 151 152, on right: 145 149 262 283
operation (123)
    on left: 153 154 155 156 157 158, on right: 134 135 136 137 214
    215
string (124)
    on left: 159 160 161, on right: 63 64 105 171 236
string_element (125)
    on left: 162 163, on right: 159 163
substring (126)
    on left: 164 165 166 167 168 169, on right: 91 161 279
literal (127)
    on left: 170 171 172, on right: 136 146
computed_goto_statement (128)
    on left: 173, on right: 13
base_type (129)
    on left: 174 175 176 177 178 179 180 181, on right: 192 193 194
    195
goto_statement (130)
    on left: 182, on right: 12
implicit_statement (131)
    on left: 183, on right: 16
implicit_specifier_list (132)
    on left: 184 185, on right: 183 185
implicit_specifier_item (133)
    on left: 186, on right: 184 185
implicit_specifier_code_list (134)
    on left: 187 188, on right: 186
implicit_specifier_code (135)
    on left: 189 190, on right: 187 188
intrinsic_or_extern_statement (136)
    on left: 191, on right: 17
type_specifier (137)
    on left: 192 193 194 195, on right: 186 218 250
equivalence_statement (138)
    on left: 196 197, on right: 19
equivalence_list (139)
    on left: 198 199, on right: 196 197 199
equivalence_group (140)
    on left: 200 201, on right: 198 199 201
equivalence_item (141)
    on left: 202 203, on right: 200 201
dimension_statement (142)
    on left: 204, on right: 15
array_list (143)
    on left: 205 206, on right: 204 206
array_declarator (144)
    on left: 207, on right: 203 205 206 224 225 246
dimension_list (145)
    on left: 208 209, on right: 207 209
dimension_element (146)
    on left: 210 211, on right: 208 209
dimension_atom (147)
    on left: 212 213 214 215 216 217, on right: 210 211 214 215
type_definition_statement (148)
    on left: 218, on right: 18
type_variable_list (149)
    on left: 219 220, on right: 218 220
extended_type_variable_item (150)
    on left: 221 222, on right: 219 220
type_variable_item (151)
    on left: 223 224 225 226 227 228, on right: 221 222
value_list (152)
    on left: 229 230, on right: 222 230
value_element (153)
    on left: 231 232, on right: 229 230
value_atom (154)
    on left: 233 234 235 236, on right: 231 232
common_statement (155)
    on left: 237 238, on right: 14
common_block_name (156)
    on left: 239 240, on right: 241 242 243
common_block_list (157)
    on left: 241 242 243 244, on right: 237 238 242 243 244
common_item (158)
    on left: 245 246, on right: 239 240 244 247 248
common_item_list (159)
    on left: 247 248, on right: 238 248
function_statement (160)
    on left: 249 250, on right: 20
base_function_spec (161)
    on left: 251 252 253, on right: 249 250
base_function_name (162)
    on left: 254 255 256, on right: 251 252 253
variable_list (163)
    on left: 257 258, on right: 191 252 258 263
variable_list_element (164)
    on left: 259 260 261 262, on right: 257 258
subroutine_statement (165)
    on left: 263 264 265, on right: 21
namelist_statement (166)
    on left: 266, on right: 22
namelist_list (167)
    on left: 267 268 269 270, on right: 266 268 269 270
namelist_group (168)
    on left: 271, on right: 267 269 270
parameter_statement (169)
    on left: 272 273, on right: 23
parameter_list (170)
    on left: 274 275, on right: 273 275
vax_parameter_list (171)
    on left: 276 277, on right: 272 277
arithmetic_statement (172)
    on left: 278 279 280 281 282 283, on right: 25
data_statement (173)
    on left: 284, on right: 24


state 0

    $default	reduce using rule 1 (fake_statement)

    fake_statement	go to state 1



state 1

    fake_statement  ->  fake_statement . statement   (rule 2)

    $   	go to state 537
    error	shift, and go to state 2
    END_OF_STATEMENT	shift, and go to state 3
    INCLUDE_T	shift, and go to state 4
    FORMAT_STATEMENT	shift, and go to state 5
    PASS_STATEMENT_T	shift, and go to state 6
    OPEN_STATEMENT_T	shift, and go to state 7
    IO_STATEMENT	shift, and go to state 8
    COMMENT_STATEMENT_OUT	shift, and go to state 9
    IF_STATEMENT	shift, and go to state 10
    ENCODE_DECODE	shift, and go to state 11
    ELSE_IF_STATEMENT	shift, and go to state 12
    ELSE_STATEMENT	shift, and go to state 13
    END_OF_PROGRAM	shift, and go to state 14
    BYTE_TYPE	shift, and go to state 15
    LOGICAL_TYPE	shift, and go to state 16
    INTEGER_TYPE	shift, and go to state 17
    REAL_TYPE	shift, and go to state 18
    DOUBLE_TYPE	shift, and go to state 19
    COMPLEX_TYPE	shift, and go to state 20
    DOUBLE_COMPLEX_TYPE	shift, and go to state 21
    CHARACTER_TYPE	shift, and go to state 22
    DO_STATEMENT	shift, and go to state 23
    END_DO_STATEMENT	shift, and go to state 24
    END_IF_STATEMENT	shift, and go to state 25
    GOTO_STATEMENT	shift, and go to state 26
    COMPUTED_GOTO_STATEMENT	shift, and go to state 27
    COMMON_STATEMENT	shift, and go to state 28
    INTRINSIC_OR_EXTERN_STATEMENT	shift, and go to state 29
    VARIABLE_NAME	shift, and go to state 30
    SPECIFICATION_COMPLETE	shift, and go to state 31
    IMPLICIT_STATEMENT	shift, and go to state 32
    EQUIVALENCE_STATEMENT	shift, and go to state 33
    DIMENSION_STATEMENT	shift, and go to state 34
    FUNCTION	shift, and go to state 35
    SUBROUTINE	shift, and go to state 36
    NAMELIST	shift, and go to state 37
    PARAMETER	shift, and go to state 38
    DATA	shift, and go to state 39
    CALL	shift, and go to state 40
    GLOBAL_FUNCTION	shift, and go to state 41
    GLOBAL_SUBROUTINE	shift, and go to state 42
    GLOBAL_COMMON	shift, and go to state 43

    statement	go to state 44
    global_function_statement	go to state 45
    global_subroutine_statement	go to state 46
    global_common_statement	go to state 47
    pass_statement	go to state 48
    if_statement	go to state 49
    base_if	go to state 50
    if_statement_start	go to state 51
    else_statement	go to state 52
    comment_statement_out	go to state 53
    open_statement	go to state 54
    encode_decode_statement	go to state 55
    io_statement	go to state 56
    io_control_list	go to state 57
    io_control_list_nonkey	go to state 58
    io_control_list_key	go to state 59
    include_statement	go to state 60
    format_statement	go to state 61
    do_statement	go to state 62
    end_do_statement	go to state 63
    end_if_statement	go to state 64
    paren_ref	go to state 65
    structure_ref	go to state 66
    substring	go to state 67
    computed_goto_statement	go to state 68
    base_type	go to state 69
    goto_statement	go to state 70
    implicit_statement	go to state 71
    intrinsic_or_extern_statement	go to state 72
    type_specifier	go to state 73
    equivalence_statement	go to state 74
    dimension_statement	go to state 75
    type_definition_statement	go to state 76
    common_statement	go to state 77
    function_statement	go to state 78
    subroutine_statement	go to state 79
    namelist_statement	go to state 80
    parameter_statement	go to state 81
    arithmetic_statement	go to state 82
    data_statement	go to state 83



state 2

    statement  ->  error . END_OF_STATEMENT   (rule 34)

    END_OF_STATEMENT	shift, and go to state 84



state 3

    statement  ->  END_OF_STATEMENT .   (rule 33)

    $default	reduce using rule 33 (statement)



state 4

    include_statement  ->  INCLUDE_T . L_PAREN PASS_TEXT R_PAREN QUOTE END_OF_STATEMENT   (rule 106)
    include_statement  ->  INCLUDE_T . pass_text L_PAREN PASS_TEXT R_PAREN QUOTE END_OF_STATEMENT   (rule 107)
    include_statement  ->  INCLUDE_T . PASS_TEXT QUOTE END_OF_STATEMENT   (rule 108)

    PASS_TEXT	shift, and go to state 85
    L_PAREN	shift, and go to state 86

    pass_text	go to state 87



state 5

    format_statement  ->  FORMAT_STATEMENT . pass_text END_OF_STATEMENT   (rule 109)

    PASS_TEXT	shift, and go to state 88

    pass_text	go to state 89



state 6

    pass_statement  ->  PASS_STATEMENT_T . pass_text END_OF_STATEMENT   (rule 51)
    pass_statement  ->  PASS_STATEMENT_T . END_OF_STATEMENT   (rule 52)

    END_OF_STATEMENT	shift, and go to state 90
    PASS_TEXT	shift, and go to state 88

    pass_text	go to state 91



state 7

    open_statement  ->  OPEN_STATEMENT_T . open_arg2 R_PAREN END_OF_STATEMENT   (rule 69)

    INTEGER_CONSTANT	shift, and go to state 92
    OPEN_PASS	shift, and go to state 93
    OPEN_DUMP	shift, and go to state 94

    open_arg2	go to state 95
    open_arg	go to state 96
    open_dump	go to state 97
    open_pass	go to state 98



state 8

    io_control_list_nonkey  ->  IO_STATEMENT . expression   (rule 96)
    io_control_list_nonkey  ->  IO_STATEMENT . MUL_OP   (rule 97)
    io_control_list_nonkey  ->  IO_STATEMENT . expression APOS expression   (rule 99)
    io_control_list_key  ->  IO_STATEMENT . io_param   (rule 101)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    IO_PARAM_NAME	shift, and go to state 104
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 111
    EXP_OP	shift, and go to state 112

    io_param	go to state 113
    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 116
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 9

    comment_statement_out  ->  COMMENT_STATEMENT_OUT . END_OF_STATEMENT   (rule 67)
    comment_statement_out  ->  COMMENT_STATEMENT_OUT . pass_text END_OF_STATEMENT   (rule 68)

    END_OF_STATEMENT	shift, and go to state 122
    PASS_TEXT	shift, and go to state 88

    pass_text	go to state 123



state 10

    if_statement_start  ->  IF_STATEMENT .   (rule 58)

    $default	reduce using rule 58 (if_statement_start)



state 11

    encode_decode_statement  ->  ENCODE_DECODE . L_PAREN expression COMMA format_spec COMMA encode_optional R_PAREN pass_text END_OF_STATEMENT   (rule 82)
    encode_decode_statement  ->  ENCODE_DECODE . L_PAREN expression COMMA format_spec COMMA encode_optional R_PAREN END_OF_STATEMENT   (rule 83)

    L_PAREN	shift, and go to state 124



state 12

    if_statement_start  ->  ELSE_IF_STATEMENT .   (rule 59)

    $default	reduce using rule 59 (if_statement_start)



state 13

    else_statement  ->  ELSE_STATEMENT . END_OF_STATEMENT   (rule 66)

    END_OF_STATEMENT	shift, and go to state 125



state 14

    statement  ->  END_OF_PROGRAM .   (rule 32)

    $default	reduce using rule 32 (statement)



state 15

    base_type  ->  BYTE_TYPE .   (rule 174)

    $default	reduce using rule 174 (base_type)



state 16

    base_type  ->  LOGICAL_TYPE .   (rule 175)

    $default	reduce using rule 175 (base_type)



state 17

    base_type  ->  INTEGER_TYPE .   (rule 176)

    $default	reduce using rule 176 (base_type)



state 18

    base_type  ->  REAL_TYPE .   (rule 177)

    $default	reduce using rule 177 (base_type)



state 19

    base_type  ->  DOUBLE_TYPE .   (rule 178)

    $default	reduce using rule 178 (base_type)



state 20

    base_type  ->  COMPLEX_TYPE .   (rule 179)

    $default	reduce using rule 179 (base_type)



state 21

    base_type  ->  DOUBLE_COMPLEX_TYPE .   (rule 180)

    $default	reduce using rule 180 (base_type)



state 22

    base_type  ->  CHARACTER_TYPE .   (rule 181)

    $default	reduce using rule 181 (base_type)



state 23

    do_statement  ->  DO_STATEMENT . do_limit pass_text END_OF_STATEMENT   (rule 110)
    do_statement  ->  DO_STATEMENT . pass_text END_OF_STATEMENT   (rule 111)

    PASS_TEXT	shift, and go to state 88
    INTEGER_CONSTANT	shift, and go to state 126

    do_limit	go to state 127
    pass_text	go to state 128



state 24

    end_do_statement  ->  END_DO_STATEMENT . END_OF_STATEMENT   (rule 114)
    end_do_statement  ->  END_DO_STATEMENT . pass_text END_OF_STATEMENT   (rule 115)

    END_OF_STATEMENT	shift, and go to state 129
    PASS_TEXT	shift, and go to state 88

    pass_text	go to state 130



state 25

    end_if_statement  ->  END_IF_STATEMENT . END_OF_STATEMENT   (rule 116)
    end_if_statement  ->  END_IF_STATEMENT . pass_text END_OF_STATEMENT   (rule 117)

    END_OF_STATEMENT	shift, and go to state 131
    PASS_TEXT	shift, and go to state 88

    pass_text	go to state 132



state 26

    goto_statement  ->  GOTO_STATEMENT . END_OF_STATEMENT   (rule 182)

    END_OF_STATEMENT	shift, and go to state 133



state 27

    computed_goto_statement  ->  COMPUTED_GOTO_STATEMENT . pass_text END_OF_STATEMENT   (rule 173)

    PASS_TEXT	shift, and go to state 88

    pass_text	go to state 134



state 28

    common_statement  ->  COMMON_STATEMENT . common_block_list END_OF_STATEMENT   (rule 237)
    common_statement  ->  COMMON_STATEMENT . common_item_list common_block_list END_OF_STATEMENT   (rule 238)

    VARIABLE_NAME	shift, and go to state 135
    SLASH	shift, and go to state 136

    array_declarator	go to state 137
    common_block_name	go to state 138
    common_block_list	go to state 139
    common_item	go to state 140
    common_item_list	go to state 141



state 29

    intrinsic_or_extern_statement  ->  INTRINSIC_OR_EXTERN_STATEMENT . variable_list END_OF_STATEMENT   (rule 191)

    VARIABLE_NAME	shift, and go to state 142
    STAR	shift, and go to state 143

    paren_ref	go to state 144
    structure_ref	go to state 145
    variable_list	go to state 146
    variable_list_element	go to state 147



state 30

    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list R_PAREN   (rule 127)
    paren_ref  ->  VARIABLE_NAME . L_PAREN R_PAREN   (rule 128)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list R_PAREN   (rule 129)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list COMMA R_PAREN   (rule 130)
    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list COMMA R_PAREN   (rule 131)
    structure_ref  ->  VARIABLE_NAME . DOT VARIABLE_NAME   (rule 148)
    structure_ref  ->  VARIABLE_NAME . DOT paren_ref   (rule 152)
    substring  ->  VARIABLE_NAME . L_PAREN expression COLON expression R_PAREN   (rule 164)
    substring  ->  VARIABLE_NAME . L_PAREN COLON expression R_PAREN   (rule 165)
    substring  ->  VARIABLE_NAME . L_PAREN expression COLON R_PAREN   (rule 166)
    arithmetic_statement  ->  VARIABLE_NAME . EQUALS expression END_OF_STATEMENT   (rule 278)

    EQUALS	shift, and go to state 148
    L_PAREN	shift, and go to state 149
    DOT 	shift, and go to state 150



state 31

    statement  ->  SPECIFICATION_COMPLETE .   (rule 35)

    $default	reduce using rule 35 (statement)



state 32

    implicit_statement  ->  IMPLICIT_STATEMENT . implicit_specifier_list END_OF_STATEMENT   (rule 183)

    BYTE_TYPE	shift, and go to state 15
    LOGICAL_TYPE	shift, and go to state 16
    INTEGER_TYPE	shift, and go to state 17
    REAL_TYPE	shift, and go to state 18
    DOUBLE_TYPE	shift, and go to state 19
    COMPLEX_TYPE	shift, and go to state 20
    DOUBLE_COMPLEX_TYPE	shift, and go to state 21
    CHARACTER_TYPE	shift, and go to state 22

    base_type	go to state 69
    implicit_specifier_list	go to state 151
    implicit_specifier_item	go to state 152
    type_specifier	go to state 153



state 33

    equivalence_statement  ->  EQUIVALENCE_STATEMENT . equivalence_list END_OF_STATEMENT   (rule 196)
    equivalence_statement  ->  EQUIVALENCE_STATEMENT . COMMA equivalence_list END_OF_STATEMENT   (rule 197)

    L_PAREN	shift, and go to state 154
    COMMA	shift, and go to state 155

    equivalence_list	go to state 156



state 34

    dimension_statement  ->  DIMENSION_STATEMENT . array_list END_OF_STATEMENT   (rule 204)

    VARIABLE_NAME	shift, and go to state 157

    array_list	go to state 158
    array_declarator	go to state 159



state 35

    function_statement  ->  FUNCTION . base_function_spec END_OF_STATEMENT   (rule 249)

    VARIABLE_NAME	shift, and go to state 160

    base_function_spec	go to state 161
    base_function_name	go to state 162



state 36

    subroutine_statement  ->  SUBROUTINE . VARIABLE_NAME L_PAREN variable_list R_PAREN END_OF_STATEMENT   (rule 263)
    subroutine_statement  ->  SUBROUTINE . VARIABLE_NAME END_OF_STATEMENT   (rule 264)
    subroutine_statement  ->  SUBROUTINE . VARIABLE_NAME L_PAREN R_PAREN END_OF_STATEMENT   (rule 265)

    VARIABLE_NAME	shift, and go to state 163



state 37

    namelist_statement  ->  NAMELIST . namelist_list END_OF_STATEMENT   (rule 266)

    SLASH	shift, and go to state 164

    namelist_list	go to state 165
    namelist_group	go to state 166



state 38

    parameter_statement  ->  PARAMETER . vax_parameter_list END_OF_STATEMENT   (rule 272)
    parameter_statement  ->  PARAMETER . L_PAREN parameter_list R_PAREN END_OF_STATEMENT   (rule 273)

    L_PAREN	shift, and go to state 167
    VARIABLE_NAME	shift, and go to state 168

    vax_parameter_list	go to state 169



state 39

    data_statement  ->  DATA . pass_text END_OF_STATEMENT   (rule 284)

    PASS_TEXT	shift, and go to state 88

    pass_text	go to state 170



state 40

    arithmetic_statement  ->  CALL . paren_ref END_OF_STATEMENT   (rule 281)
    arithmetic_statement  ->  CALL . VARIABLE_NAME END_OF_STATEMENT   (rule 282)

    VARIABLE_NAME	shift, and go to state 171

    paren_ref	go to state 172



state 41

    global_function_statement  ->  GLOBAL_FUNCTION . VARIABLE_NAME STAR VARIABLE_NAME STAR signed_integer global_call_spec END_OF_STATEMENT   (rule 36)

    VARIABLE_NAME	shift, and go to state 173



state 42

    global_subroutine_statement  ->  GLOBAL_SUBROUTINE . VARIABLE_NAME global_call_spec END_OF_STATEMENT   (rule 45)

    VARIABLE_NAME	shift, and go to state 174



state 43

    global_common_statement  ->  GLOBAL_COMMON . SLASH VARIABLE_NAME SLASH global_common_list END_OF_STATEMENT   (rule 46)
    global_common_statement  ->  GLOBAL_COMMON . SLASH SLASH global_common_list END_OF_STATEMENT   (rule 47)

    SLASH	shift, and go to state 175



state 44

    fake_statement  ->  fake_statement statement .   (rule 2)

    $default	reduce using rule 2 (fake_statement)



state 45

    statement  ->  global_function_statement .   (rule 26)

    $default	reduce using rule 26 (statement)



state 46

    statement  ->  global_subroutine_statement .   (rule 27)

    $default	reduce using rule 27 (statement)



state 47

    statement  ->  global_common_statement .   (rule 28)

    $default	reduce using rule 28 (statement)



state 48

    statement  ->  pass_statement .   (rule 8)

    $default	reduce using rule 8 (statement)



state 49

    statement  ->  if_statement .   (rule 9)

    $default	reduce using rule 9 (statement)



state 50

    if_statement  ->  base_if . INTEGER_CONSTANT COMMA INTEGER_CONSTANT COMMA INTEGER_CONSTANT END_OF_STATEMENT   (rule 53)
    if_statement  ->  base_if . THEN_T END_OF_STATEMENT   (rule 54)
    if_statement  ->  base_if . pass_text END_OF_STATEMENT   (rule 55)

    PASS_TEXT	shift, and go to state 88
    INTEGER_CONSTANT	shift, and go to state 176
    THEN_T	shift, and go to state 177

    pass_text	go to state 178



state 51

    base_if  ->  if_statement_start . if_arguement R_PAREN   (rule 56)
    base_if  ->  if_statement_start . logical_arguement R_PAREN   (rule 57)

    IF_ARGUEMENT	shift, and go to state 179
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 180

    logical_arguement	go to state 181
    if_arguement	go to state 182
    paren_ref	go to state 183
    string	go to state 184
    substring	go to state 120



state 52

    statement  ->  else_statement .   (rule 10)

    $default	reduce using rule 10 (statement)



state 53

    statement  ->  comment_statement_out .   (rule 11)

    $default	reduce using rule 11 (statement)



state 54

    statement  ->  open_statement .   (rule 5)

    $default	reduce using rule 5 (statement)



state 55

    statement  ->  encode_decode_statement .   (rule 6)

    $default	reduce using rule 6 (statement)



state 56

    statement  ->  io_statement .   (rule 7)

    $default	reduce using rule 7 (statement)



state 57

    io_statement  ->  io_control_list . END_OF_STATEMENT   (rule 92)
    io_statement  ->  io_control_list . pass_text END_OF_STATEMENT   (rule 93)

    END_OF_STATEMENT	shift, and go to state 185
    PASS_TEXT	shift, and go to state 88

    pass_text	go to state 186



state 58

    io_control_list  ->  io_control_list_nonkey . R_PAREN   (rule 94)
    io_control_list_nonkey  ->  io_control_list_nonkey . COMMA MUL_OP   (rule 98)
    io_control_list_nonkey  ->  io_control_list_nonkey . COMMA expression   (rule 100)
    io_control_list_key  ->  io_control_list_nonkey . COMMA io_param   (rule 103)

    R_PAREN	shift, and go to state 187
    COMMA	shift, and go to state 188



state 59

    io_control_list  ->  io_control_list_key . R_PAREN   (rule 95)
    io_control_list_key  ->  io_control_list_key . COMMA io_param   (rule 102)

    R_PAREN	shift, and go to state 189
    COMMA	shift, and go to state 190



state 60

    statement  ->  include_statement .   (rule 3)

    $default	reduce using rule 3 (statement)



state 61

    statement  ->  format_statement .   (rule 4)

    $default	reduce using rule 4 (statement)



state 62

    statement  ->  do_statement .   (rule 29)

    $default	reduce using rule 29 (statement)



state 63

    statement  ->  end_do_statement .   (rule 30)

    $default	reduce using rule 30 (statement)



state 64

    statement  ->  end_if_statement .   (rule 31)

    $default	reduce using rule 31 (statement)



state 65

    structure_ref  ->  paren_ref . DOT VARIABLE_NAME   (rule 150)
    structure_ref  ->  paren_ref . DOT paren_ref   (rule 151)
    substring  ->  paren_ref . L_PAREN expression COLON expression R_PAREN   (rule 167)
    substring  ->  paren_ref . L_PAREN COLON expression R_PAREN   (rule 168)
    substring  ->  paren_ref . L_PAREN expression COLON R_PAREN   (rule 169)
    arithmetic_statement  ->  paren_ref . EQUALS expression END_OF_STATEMENT   (rule 280)

    EQUALS	shift, and go to state 191
    L_PAREN	shift, and go to state 192
    DOT 	shift, and go to state 193



state 66

    structure_ref  ->  structure_ref . DOT VARIABLE_NAME   (rule 149)
    arithmetic_statement  ->  structure_ref . EQUALS expression END_OF_STATEMENT   (rule 283)

    EQUALS	shift, and go to state 194
    DOT 	shift, and go to state 195



state 67

    arithmetic_statement  ->  substring . EQUALS expression END_OF_STATEMENT   (rule 279)

    EQUALS	shift, and go to state 196



state 68

    statement  ->  computed_goto_statement .   (rule 13)

    $default	reduce using rule 13 (statement)



state 69

    type_specifier  ->  base_type .   (rule 192)
    type_specifier  ->  base_type . STAR INTEGER_CONSTANT   (rule 193)
    type_specifier  ->  base_type . STAR L_PAREN expression R_PAREN   (rule 194)
    type_specifier  ->  base_type . STAR L_PAREN STAR R_PAREN   (rule 195)

    STAR	shift, and go to state 197

    $default	reduce using rule 192 (type_specifier)



state 70

    statement  ->  goto_statement .   (rule 12)

    $default	reduce using rule 12 (statement)



state 71

    statement  ->  implicit_statement .   (rule 16)

    $default	reduce using rule 16 (statement)



state 72

    statement  ->  intrinsic_or_extern_statement .   (rule 17)

    $default	reduce using rule 17 (statement)



state 73

    type_definition_statement  ->  type_specifier . type_variable_list END_OF_STATEMENT   (rule 218)
    function_statement  ->  type_specifier . FUNCTION base_function_spec END_OF_STATEMENT   (rule 250)

    VARIABLE_NAME	shift, and go to state 198
    FUNCTION	shift, and go to state 199

    array_declarator	go to state 200
    type_variable_list	go to state 201
    extended_type_variable_item	go to state 202
    type_variable_item	go to state 203



state 74

    statement  ->  equivalence_statement .   (rule 19)

    $default	reduce using rule 19 (statement)



state 75

    statement  ->  dimension_statement .   (rule 15)

    $default	reduce using rule 15 (statement)



state 76

    statement  ->  type_definition_statement .   (rule 18)

    $default	reduce using rule 18 (statement)



state 77

    statement  ->  common_statement .   (rule 14)

    $default	reduce using rule 14 (statement)



state 78

    statement  ->  function_statement .   (rule 20)

    $default	reduce using rule 20 (statement)



state 79

    statement  ->  subroutine_statement .   (rule 21)

    $default	reduce using rule 21 (statement)



state 80

    statement  ->  namelist_statement .   (rule 22)

    $default	reduce using rule 22 (statement)



state 81

    statement  ->  parameter_statement .   (rule 23)

    $default	reduce using rule 23 (statement)



state 82

    statement  ->  arithmetic_statement .   (rule 25)

    $default	reduce using rule 25 (statement)



state 83

    statement  ->  data_statement .   (rule 24)

    $default	reduce using rule 24 (statement)



state 84

    statement  ->  error END_OF_STATEMENT .   (rule 34)

    $default	reduce using rule 34 (statement)



state 85

    include_statement  ->  INCLUDE_T PASS_TEXT . QUOTE END_OF_STATEMENT   (rule 108)
    pass_text  ->  PASS_TEXT .   (rule 118)

    QUOTE	shift, and go to state 204

    $default	reduce using rule 118 (pass_text)



state 86

    include_statement  ->  INCLUDE_T L_PAREN . PASS_TEXT R_PAREN QUOTE END_OF_STATEMENT   (rule 106)

    PASS_TEXT	shift, and go to state 205



state 87

    include_statement  ->  INCLUDE_T pass_text . L_PAREN PASS_TEXT R_PAREN QUOTE END_OF_STATEMENT   (rule 107)
    pass_text  ->  pass_text . PASS_TEXT   (rule 119)

    PASS_TEXT	shift, and go to state 206
    L_PAREN	shift, and go to state 207



state 88

    pass_text  ->  PASS_TEXT .   (rule 118)

    $default	reduce using rule 118 (pass_text)



state 89

    format_statement  ->  FORMAT_STATEMENT pass_text . END_OF_STATEMENT   (rule 109)
    pass_text  ->  pass_text . PASS_TEXT   (rule 119)

    END_OF_STATEMENT	shift, and go to state 208
    PASS_TEXT	shift, and go to state 206



state 90

    pass_statement  ->  PASS_STATEMENT_T END_OF_STATEMENT .   (rule 52)

    $default	reduce using rule 52 (pass_statement)



state 91

    pass_statement  ->  PASS_STATEMENT_T pass_text . END_OF_STATEMENT   (rule 51)
    pass_text  ->  pass_text . PASS_TEXT   (rule 119)

    END_OF_STATEMENT	shift, and go to state 209
    PASS_TEXT	shift, and go to state 206



state 92

    open_arg  ->  INTEGER_CONSTANT .   (rule 72)

    $default	reduce using rule 72 (open_arg)



state 93

    open_pass  ->  OPEN_PASS . pass_text   (rule 79)
    open_pass  ->  OPEN_PASS . pass_text QUOTE   (rule 80)
    open_pass  ->  OPEN_PASS .   (rule 81)

    PASS_TEXT	shift, and go to state 88

    $default	reduce using rule 81 (open_pass)

    pass_text	go to state 210



state 94

    open_dump  ->  OPEN_DUMP . pass_text   (rule 77)
    open_dump  ->  OPEN_DUMP .   (rule 78)

    PASS_TEXT	shift, and go to state 88

    $default	reduce using rule 78 (open_dump)

    pass_text	go to state 211



state 95

    open_statement  ->  OPEN_STATEMENT_T open_arg2 . R_PAREN END_OF_STATEMENT   (rule 69)

    R_PAREN	shift, and go to state 212



state 96

    open_arg2  ->  open_arg .   (rule 70)
    open_arg  ->  open_arg . COMMA open_pass   (rule 74)
    open_arg  ->  open_arg . COMMA INTEGER_CONSTANT   (rule 75)
    open_arg  ->  open_arg . COMMA open_dump   (rule 76)

    COMMA	shift, and go to state 213

    $default	reduce using rule 70 (open_arg2)



state 97

    open_arg  ->  open_dump .   (rule 73)

    $default	reduce using rule 73 (open_arg)



state 98

    open_arg  ->  open_pass .   (rule 71)

    $default	reduce using rule 71 (open_arg)



state 99

    literal  ->  INTEGER_CONSTANT .   (rule 170)

    $default	reduce using rule 170 (literal)



state 100

    literal  ->  REAL_CONSTANT .   (rule 172)

    $default	reduce using rule 172 (literal)



state 101

    expression  ->  L_PAREN . expression R_PAREN   (rule 138)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 215
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 102

    string  ->  STRING_START . string_element APOS   (rule 159)
    string  ->  STRING_START . APOS   (rule 160)

    STRING_ELEMENT	shift, and go to state 216
    APOS	shift, and go to state 217

    string_element	go to state 218



state 103

    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list R_PAREN   (rule 127)
    paren_ref  ->  VARIABLE_NAME . L_PAREN R_PAREN   (rule 128)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list R_PAREN   (rule 129)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list COMMA R_PAREN   (rule 130)
    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list COMMA R_PAREN   (rule 131)
    expression  ->  VARIABLE_NAME .   (rule 132)
    structure_ref  ->  VARIABLE_NAME . DOT VARIABLE_NAME   (rule 148)
    structure_ref  ->  VARIABLE_NAME . DOT paren_ref   (rule 152)
    substring  ->  VARIABLE_NAME . L_PAREN expression COLON expression R_PAREN   (rule 164)
    substring  ->  VARIABLE_NAME . L_PAREN COLON expression R_PAREN   (rule 165)
    substring  ->  VARIABLE_NAME . L_PAREN expression COLON R_PAREN   (rule 166)

    L_PAREN	shift, and go to state 149
    DOT 	shift, and go to state 150

    $default	reduce using rule 132 (expression)



state 104

    io_param  ->  IO_PARAM_NAME . EQUALS pass_text   (rule 104)
    io_param  ->  IO_PARAM_NAME . EQUALS string   (rule 105)

    EQUALS	shift, and go to state 219



state 105

    operation  ->  STAR .   (rule 156)

    $default	reduce using rule 156 (operation)



state 106

    variable_reference  ->  REFERENCE . L_PAREN expression R_PAREN   (rule 126)

    L_PAREN	shift, and go to state 220



state 107

    operation  ->  CONCAT .   (rule 158)

    $default	reduce using rule 158 (operation)



state 108

    operation  ->  SLASH .   (rule 155)

    $default	reduce using rule 155 (operation)



state 109

    expression  ->  LOGICAL_NOT . expression   (rule 142)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 221
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 110

    operation  ->  ADD_OP .   (rule 153)

    $default	reduce using rule 153 (operation)



state 111

    io_control_list_nonkey  ->  IO_STATEMENT MUL_OP .   (rule 97)
    operation  ->  MUL_OP .   (rule 154)

    R_PAREN	reduce using rule 97 (io_control_list_nonkey)
    COMMA	reduce using rule 97 (io_control_list_nonkey)
    $default	reduce using rule 154 (operation)



state 112

    operation  ->  EXP_OP .   (rule 157)

    $default	reduce using rule 157 (operation)



state 113

    io_control_list_key  ->  IO_STATEMENT io_param .   (rule 101)

    $default	reduce using rule 101 (io_control_list_key)



state 114

    expression  ->  variable_reference .   (rule 147)

    $default	reduce using rule 147 (expression)



state 115

    expression  ->  paren_ref .   (rule 133)
    structure_ref  ->  paren_ref . DOT VARIABLE_NAME   (rule 150)
    structure_ref  ->  paren_ref . DOT paren_ref   (rule 151)
    substring  ->  paren_ref . L_PAREN expression COLON expression R_PAREN   (rule 167)
    substring  ->  paren_ref . L_PAREN COLON expression R_PAREN   (rule 168)
    substring  ->  paren_ref . L_PAREN expression COLON R_PAREN   (rule 169)

    L_PAREN	shift, and go to state 192
    DOT 	shift, and go to state 193

    $default	reduce using rule 133 (expression)



state 116

    io_control_list_nonkey  ->  IO_STATEMENT expression .   (rule 96)
    io_control_list_nonkey  ->  IO_STATEMENT expression . APOS expression   (rule 99)
    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    APOS	shift, and go to state 222
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 96 (io_control_list_nonkey)



state 117

    expression  ->  structure_ref .   (rule 145)
    structure_ref  ->  structure_ref . DOT VARIABLE_NAME   (rule 149)

    DOT 	shift, and go to state 195

    $default	reduce using rule 145 (expression)



state 118

    expression  ->  operation . VARIABLE_NAME   (rule 134)
    expression  ->  operation . paren_ref   (rule 135)
    expression  ->  operation . literal   (rule 136)
    expression  ->  operation . L_PAREN expression R_PAREN   (rule 137)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 228
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 229

    paren_ref	go to state 230
    string	go to state 119
    substring	go to state 120
    literal	go to state 231



state 119

    literal  ->  string .   (rule 171)

    $default	reduce using rule 171 (literal)



state 120

    string  ->  substring .   (rule 161)

    $default	reduce using rule 161 (string)



state 121

    expression  ->  literal .   (rule 146)

    $default	reduce using rule 146 (expression)



state 122

    comment_statement_out  ->  COMMENT_STATEMENT_OUT END_OF_STATEMENT .   (rule 67)

    $default	reduce using rule 67 (comment_statement_out)



state 123

    comment_statement_out  ->  COMMENT_STATEMENT_OUT pass_text . END_OF_STATEMENT   (rule 68)
    pass_text  ->  pass_text . PASS_TEXT   (rule 119)

    END_OF_STATEMENT	shift, and go to state 232
    PASS_TEXT	shift, and go to state 206



state 124

    encode_decode_statement  ->  ENCODE_DECODE L_PAREN . expression COMMA format_spec COMMA encode_optional R_PAREN pass_text END_OF_STATEMENT   (rule 82)
    encode_decode_statement  ->  ENCODE_DECODE L_PAREN . expression COMMA format_spec COMMA encode_optional R_PAREN END_OF_STATEMENT   (rule 83)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 233
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 125

    else_statement  ->  ELSE_STATEMENT END_OF_STATEMENT .   (rule 66)

    $default	reduce using rule 66 (else_statement)



state 126

    do_limit  ->  INTEGER_CONSTANT .   (rule 112)
    do_limit  ->  INTEGER_CONSTANT . COMMA   (rule 113)

    COMMA	shift, and go to state 234

    $default	reduce using rule 112 (do_limit)



state 127

    do_statement  ->  DO_STATEMENT do_limit . pass_text END_OF_STATEMENT   (rule 110)

    PASS_TEXT	shift, and go to state 88

    pass_text	go to state 235



state 128

    do_statement  ->  DO_STATEMENT pass_text . END_OF_STATEMENT   (rule 111)
    pass_text  ->  pass_text . PASS_TEXT   (rule 119)

    END_OF_STATEMENT	shift, and go to state 236
    PASS_TEXT	shift, and go to state 206



state 129

    end_do_statement  ->  END_DO_STATEMENT END_OF_STATEMENT .   (rule 114)

    $default	reduce using rule 114 (end_do_statement)



state 130

    end_do_statement  ->  END_DO_STATEMENT pass_text . END_OF_STATEMENT   (rule 115)
    pass_text  ->  pass_text . PASS_TEXT   (rule 119)

    END_OF_STATEMENT	shift, and go to state 237
    PASS_TEXT	shift, and go to state 206



state 131

    end_if_statement  ->  END_IF_STATEMENT END_OF_STATEMENT .   (rule 116)

    $default	reduce using rule 116 (end_if_statement)



state 132

    end_if_statement  ->  END_IF_STATEMENT pass_text . END_OF_STATEMENT   (rule 117)
    pass_text  ->  pass_text . PASS_TEXT   (rule 119)

    END_OF_STATEMENT	shift, and go to state 238
    PASS_TEXT	shift, and go to state 206



state 133

    goto_statement  ->  GOTO_STATEMENT END_OF_STATEMENT .   (rule 182)

    $default	reduce using rule 182 (goto_statement)



state 134

    pass_text  ->  pass_text . PASS_TEXT   (rule 119)
    computed_goto_statement  ->  COMPUTED_GOTO_STATEMENT pass_text . END_OF_STATEMENT   (rule 173)

    END_OF_STATEMENT	shift, and go to state 239
    PASS_TEXT	shift, and go to state 206



state 135

    array_declarator  ->  VARIABLE_NAME . L_PAREN dimension_list R_PAREN   (rule 207)
    common_item  ->  VARIABLE_NAME .   (rule 245)

    L_PAREN	shift, and go to state 240

    $default	reduce using rule 245 (common_item)



state 136

    common_block_name  ->  SLASH . VARIABLE_NAME SLASH common_item   (rule 239)
    common_block_name  ->  SLASH . SLASH common_item   (rule 240)

    VARIABLE_NAME	shift, and go to state 241
    SLASH	shift, and go to state 242



state 137

    common_item  ->  array_declarator .   (rule 246)

    $default	reduce using rule 246 (common_item)



state 138

    common_block_list  ->  common_block_name .   (rule 241)

    $default	reduce using rule 241 (common_block_list)



state 139

    common_statement  ->  COMMON_STATEMENT common_block_list . END_OF_STATEMENT   (rule 237)
    common_block_list  ->  common_block_list . common_block_name   (rule 242)
    common_block_list  ->  common_block_list . COMMA common_block_name   (rule 243)
    common_block_list  ->  common_block_list . COMMA common_item   (rule 244)

    END_OF_STATEMENT	shift, and go to state 243
    SLASH	shift, and go to state 136
    COMMA	shift, and go to state 244

    common_block_name	go to state 245



state 140

    common_item_list  ->  common_item .   (rule 247)

    $default	reduce using rule 247 (common_item_list)



state 141

    common_statement  ->  COMMON_STATEMENT common_item_list . common_block_list END_OF_STATEMENT   (rule 238)
    common_item_list  ->  common_item_list . COMMA common_item   (rule 248)

    SLASH	shift, and go to state 136
    COMMA	shift, and go to state 246

    common_block_name	go to state 138
    common_block_list	go to state 247



state 142

    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list R_PAREN   (rule 127)
    paren_ref  ->  VARIABLE_NAME . L_PAREN R_PAREN   (rule 128)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list R_PAREN   (rule 129)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list COMMA R_PAREN   (rule 130)
    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list COMMA R_PAREN   (rule 131)
    structure_ref  ->  VARIABLE_NAME . DOT VARIABLE_NAME   (rule 148)
    structure_ref  ->  VARIABLE_NAME . DOT paren_ref   (rule 152)
    variable_list_element  ->  VARIABLE_NAME .   (rule 259)

    L_PAREN	shift, and go to state 248
    DOT 	shift, and go to state 150

    $default	reduce using rule 259 (variable_list_element)



state 143

    variable_list_element  ->  STAR .   (rule 260)

    $default	reduce using rule 260 (variable_list_element)



state 144

    structure_ref  ->  paren_ref . DOT VARIABLE_NAME   (rule 150)
    structure_ref  ->  paren_ref . DOT paren_ref   (rule 151)
    variable_list_element  ->  paren_ref .   (rule 261)

    DOT 	shift, and go to state 193

    $default	reduce using rule 261 (variable_list_element)



state 145

    structure_ref  ->  structure_ref . DOT VARIABLE_NAME   (rule 149)
    variable_list_element  ->  structure_ref .   (rule 262)

    DOT 	shift, and go to state 195

    $default	reduce using rule 262 (variable_list_element)



state 146

    intrinsic_or_extern_statement  ->  INTRINSIC_OR_EXTERN_STATEMENT variable_list . END_OF_STATEMENT   (rule 191)
    variable_list  ->  variable_list . COMMA variable_list_element   (rule 258)

    END_OF_STATEMENT	shift, and go to state 249
    COMMA	shift, and go to state 250



state 147

    variable_list  ->  variable_list_element .   (rule 257)

    $default	reduce using rule 257 (variable_list)



state 148

    arithmetic_statement  ->  VARIABLE_NAME EQUALS . expression END_OF_STATEMENT   (rule 278)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 251
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 149

    paren_ref  ->  VARIABLE_NAME L_PAREN . arg_list R_PAREN   (rule 127)
    paren_ref  ->  VARIABLE_NAME L_PAREN . R_PAREN   (rule 128)
    paren_ref  ->  VARIABLE_NAME L_PAREN . COMMA arg_list R_PAREN   (rule 129)
    paren_ref  ->  VARIABLE_NAME L_PAREN . COMMA arg_list COMMA R_PAREN   (rule 130)
    paren_ref  ->  VARIABLE_NAME L_PAREN . arg_list COMMA R_PAREN   (rule 131)
    substring  ->  VARIABLE_NAME L_PAREN . expression COLON expression R_PAREN   (rule 164)
    substring  ->  VARIABLE_NAME L_PAREN . COLON expression R_PAREN   (rule 165)
    substring  ->  VARIABLE_NAME L_PAREN . expression COLON R_PAREN   (rule 166)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    R_PAREN	shift, and go to state 252
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    COLON	shift, and go to state 253
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112
    COMMA	shift, and go to state 254

    arg_list	go to state 255
    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 256
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 150

    structure_ref  ->  VARIABLE_NAME DOT . VARIABLE_NAME   (rule 148)
    structure_ref  ->  VARIABLE_NAME DOT . paren_ref   (rule 152)

    VARIABLE_NAME	shift, and go to state 257

    paren_ref	go to state 258



state 151

    implicit_statement  ->  IMPLICIT_STATEMENT implicit_specifier_list . END_OF_STATEMENT   (rule 183)
    implicit_specifier_list  ->  implicit_specifier_list . COMMA implicit_specifier_item   (rule 185)

    END_OF_STATEMENT	shift, and go to state 259
    COMMA	shift, and go to state 260



state 152

    implicit_specifier_list  ->  implicit_specifier_item .   (rule 184)

    $default	reduce using rule 184 (implicit_specifier_list)



state 153

    implicit_specifier_item  ->  type_specifier . L_PAREN implicit_specifier_code_list R_PAREN   (rule 186)

    L_PAREN	shift, and go to state 261



state 154

    equivalence_list  ->  L_PAREN . equivalence_group R_PAREN   (rule 198)

    VARIABLE_NAME	shift, and go to state 262

    equivalence_group	go to state 263
    equivalence_item	go to state 264
    array_declarator	go to state 265



state 155

    equivalence_statement  ->  EQUIVALENCE_STATEMENT COMMA . equivalence_list END_OF_STATEMENT   (rule 197)

    L_PAREN	shift, and go to state 154

    equivalence_list	go to state 266



state 156

    equivalence_statement  ->  EQUIVALENCE_STATEMENT equivalence_list . END_OF_STATEMENT   (rule 196)
    equivalence_list  ->  equivalence_list . COMMA L_PAREN equivalence_group R_PAREN   (rule 199)

    END_OF_STATEMENT	shift, and go to state 267
    COMMA	shift, and go to state 268



state 157

    array_declarator  ->  VARIABLE_NAME . L_PAREN dimension_list R_PAREN   (rule 207)

    L_PAREN	shift, and go to state 240



state 158

    dimension_statement  ->  DIMENSION_STATEMENT array_list . END_OF_STATEMENT   (rule 204)
    array_list  ->  array_list . COMMA array_declarator   (rule 206)

    END_OF_STATEMENT	shift, and go to state 269
    COMMA	shift, and go to state 270



state 159

    array_list  ->  array_declarator .   (rule 205)

    $default	reduce using rule 205 (array_list)



state 160

    base_function_name  ->  VARIABLE_NAME .   (rule 254)
    base_function_name  ->  VARIABLE_NAME . STAR INTEGER_CONSTANT   (rule 255)
    base_function_name  ->  VARIABLE_NAME . STAR L_PAREN STAR R_PAREN   (rule 256)

    STAR	shift, and go to state 271

    $default	reduce using rule 254 (base_function_name)



state 161

    function_statement  ->  FUNCTION base_function_spec . END_OF_STATEMENT   (rule 249)

    END_OF_STATEMENT	shift, and go to state 272



state 162

    base_function_spec  ->  base_function_name .   (rule 251)
    base_function_spec  ->  base_function_name . L_PAREN variable_list R_PAREN   (rule 252)
    base_function_spec  ->  base_function_name . L_PAREN R_PAREN   (rule 253)

    L_PAREN	shift, and go to state 273

    $default	reduce using rule 251 (base_function_spec)



state 163

    subroutine_statement  ->  SUBROUTINE VARIABLE_NAME . L_PAREN variable_list R_PAREN END_OF_STATEMENT   (rule 263)
    subroutine_statement  ->  SUBROUTINE VARIABLE_NAME . END_OF_STATEMENT   (rule 264)
    subroutine_statement  ->  SUBROUTINE VARIABLE_NAME . L_PAREN R_PAREN END_OF_STATEMENT   (rule 265)

    END_OF_STATEMENT	shift, and go to state 274
    L_PAREN	shift, and go to state 275



state 164

    namelist_group  ->  SLASH . VARIABLE_NAME SLASH   (rule 271)

    VARIABLE_NAME	shift, and go to state 276



state 165

    namelist_statement  ->  NAMELIST namelist_list . END_OF_STATEMENT   (rule 266)
    namelist_list  ->  namelist_list . COMMA VARIABLE_NAME   (rule 268)
    namelist_list  ->  namelist_list . namelist_group VARIABLE_NAME   (rule 269)
    namelist_list  ->  namelist_list . COMMA namelist_group VARIABLE_NAME   (rule 270)

    END_OF_STATEMENT	shift, and go to state 277
    SLASH	shift, and go to state 164
    COMMA	shift, and go to state 278

    namelist_group	go to state 279



state 166

    namelist_list  ->  namelist_group . VARIABLE_NAME   (rule 267)

    VARIABLE_NAME	shift, and go to state 280



state 167

    parameter_statement  ->  PARAMETER L_PAREN . parameter_list R_PAREN END_OF_STATEMENT   (rule 273)

    VARIABLE_NAME	shift, and go to state 281

    parameter_list	go to state 282



state 168

    vax_parameter_list  ->  VARIABLE_NAME . EQUALS expression   (rule 276)

    EQUALS	shift, and go to state 283



state 169

    parameter_statement  ->  PARAMETER vax_parameter_list . END_OF_STATEMENT   (rule 272)
    vax_parameter_list  ->  vax_parameter_list . COMMA VARIABLE_NAME EQUALS expression   (rule 277)

    END_OF_STATEMENT	shift, and go to state 284
    COMMA	shift, and go to state 285



state 170

    pass_text  ->  pass_text . PASS_TEXT   (rule 119)
    data_statement  ->  DATA pass_text . END_OF_STATEMENT   (rule 284)

    END_OF_STATEMENT	shift, and go to state 286
    PASS_TEXT	shift, and go to state 206



state 171

    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list R_PAREN   (rule 127)
    paren_ref  ->  VARIABLE_NAME . L_PAREN R_PAREN   (rule 128)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list R_PAREN   (rule 129)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list COMMA R_PAREN   (rule 130)
    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list COMMA R_PAREN   (rule 131)
    arithmetic_statement  ->  CALL VARIABLE_NAME . END_OF_STATEMENT   (rule 282)

    END_OF_STATEMENT	shift, and go to state 287
    L_PAREN	shift, and go to state 248



state 172

    arithmetic_statement  ->  CALL paren_ref . END_OF_STATEMENT   (rule 281)

    END_OF_STATEMENT	shift, and go to state 288



state 173

    global_function_statement  ->  GLOBAL_FUNCTION VARIABLE_NAME . STAR VARIABLE_NAME STAR signed_integer global_call_spec END_OF_STATEMENT   (rule 36)

    STAR	shift, and go to state 289



state 174

    global_subroutine_statement  ->  GLOBAL_SUBROUTINE VARIABLE_NAME . global_call_spec END_OF_STATEMENT   (rule 45)

    L_PAREN	shift, and go to state 290

    global_call_spec	go to state 291



state 175

    global_common_statement  ->  GLOBAL_COMMON SLASH . VARIABLE_NAME SLASH global_common_list END_OF_STATEMENT   (rule 46)
    global_common_statement  ->  GLOBAL_COMMON SLASH . SLASH global_common_list END_OF_STATEMENT   (rule 47)

    VARIABLE_NAME	shift, and go to state 292
    SLASH	shift, and go to state 293



state 176

    if_statement  ->  base_if INTEGER_CONSTANT . COMMA INTEGER_CONSTANT COMMA INTEGER_CONSTANT END_OF_STATEMENT   (rule 53)

    COMMA	shift, and go to state 294



state 177

    if_statement  ->  base_if THEN_T . END_OF_STATEMENT   (rule 54)

    END_OF_STATEMENT	shift, and go to state 295



state 178

    if_statement  ->  base_if pass_text . END_OF_STATEMENT   (rule 55)
    pass_text  ->  pass_text . PASS_TEXT   (rule 119)

    END_OF_STATEMENT	shift, and go to state 296
    PASS_TEXT	shift, and go to state 206



state 179

    if_arguement  ->  IF_ARGUEMENT .   (rule 62)

    $default	reduce using rule 62 (if_arguement)



state 180

    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list R_PAREN   (rule 127)
    paren_ref  ->  VARIABLE_NAME . L_PAREN R_PAREN   (rule 128)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list R_PAREN   (rule 129)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list COMMA R_PAREN   (rule 130)
    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list COMMA R_PAREN   (rule 131)
    substring  ->  VARIABLE_NAME . L_PAREN expression COLON expression R_PAREN   (rule 164)
    substring  ->  VARIABLE_NAME . L_PAREN COLON expression R_PAREN   (rule 165)
    substring  ->  VARIABLE_NAME . L_PAREN expression COLON R_PAREN   (rule 166)

    L_PAREN	shift, and go to state 149



state 181

    base_if  ->  if_statement_start logical_arguement . R_PAREN   (rule 57)
    logical_arguement  ->  logical_arguement . RELATIONAL_OP_T if_arguement   (rule 61)

    R_PAREN	shift, and go to state 297
    RELATIONAL_OP_T	shift, and go to state 298



state 182

    base_if  ->  if_statement_start if_arguement . R_PAREN   (rule 56)
    logical_arguement  ->  if_arguement . RELATIONAL_OP_T if_arguement   (rule 60)
    if_arguement  ->  if_arguement . string   (rule 64)
    if_arguement  ->  if_arguement . IF_ARGUEMENT   (rule 65)

    R_PAREN	shift, and go to state 299
    RELATIONAL_OP_T	shift, and go to state 300
    IF_ARGUEMENT	shift, and go to state 301
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 180

    paren_ref	go to state 183
    string	go to state 302
    substring	go to state 120



state 183

    substring  ->  paren_ref . L_PAREN expression COLON expression R_PAREN   (rule 167)
    substring  ->  paren_ref . L_PAREN COLON expression R_PAREN   (rule 168)
    substring  ->  paren_ref . L_PAREN expression COLON R_PAREN   (rule 169)

    L_PAREN	shift, and go to state 192



state 184

    if_arguement  ->  string .   (rule 63)

    $default	reduce using rule 63 (if_arguement)



state 185

    io_statement  ->  io_control_list END_OF_STATEMENT .   (rule 92)

    $default	reduce using rule 92 (io_statement)



state 186

    io_statement  ->  io_control_list pass_text . END_OF_STATEMENT   (rule 93)
    pass_text  ->  pass_text . PASS_TEXT   (rule 119)

    END_OF_STATEMENT	shift, and go to state 303
    PASS_TEXT	shift, and go to state 206



state 187

    io_control_list  ->  io_control_list_nonkey R_PAREN .   (rule 94)

    $default	reduce using rule 94 (io_control_list)



state 188

    io_control_list_nonkey  ->  io_control_list_nonkey COMMA . MUL_OP   (rule 98)
    io_control_list_nonkey  ->  io_control_list_nonkey COMMA . expression   (rule 100)
    io_control_list_key  ->  io_control_list_nonkey COMMA . io_param   (rule 103)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    IO_PARAM_NAME	shift, and go to state 104
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 304
    EXP_OP	shift, and go to state 112

    io_param	go to state 305
    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 306
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 189

    io_control_list  ->  io_control_list_key R_PAREN .   (rule 95)

    $default	reduce using rule 95 (io_control_list)



state 190

    io_control_list_key  ->  io_control_list_key COMMA . io_param   (rule 102)

    IO_PARAM_NAME	shift, and go to state 104

    io_param	go to state 307



state 191

    arithmetic_statement  ->  paren_ref EQUALS . expression END_OF_STATEMENT   (rule 280)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 308
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 192

    substring  ->  paren_ref L_PAREN . expression COLON expression R_PAREN   (rule 167)
    substring  ->  paren_ref L_PAREN . COLON expression R_PAREN   (rule 168)
    substring  ->  paren_ref L_PAREN . expression COLON R_PAREN   (rule 169)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    COLON	shift, and go to state 309
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 310
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 193

    structure_ref  ->  paren_ref DOT . VARIABLE_NAME   (rule 150)
    structure_ref  ->  paren_ref DOT . paren_ref   (rule 151)

    VARIABLE_NAME	shift, and go to state 311

    paren_ref	go to state 312



state 194

    arithmetic_statement  ->  structure_ref EQUALS . expression END_OF_STATEMENT   (rule 283)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 313
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 195

    structure_ref  ->  structure_ref DOT . VARIABLE_NAME   (rule 149)

    VARIABLE_NAME	shift, and go to state 314



state 196

    arithmetic_statement  ->  substring EQUALS . expression END_OF_STATEMENT   (rule 279)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 315
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 197

    type_specifier  ->  base_type STAR . INTEGER_CONSTANT   (rule 193)
    type_specifier  ->  base_type STAR . L_PAREN expression R_PAREN   (rule 194)
    type_specifier  ->  base_type STAR . L_PAREN STAR R_PAREN   (rule 195)

    INTEGER_CONSTANT	shift, and go to state 316
    L_PAREN	shift, and go to state 317



state 198

    array_declarator  ->  VARIABLE_NAME . L_PAREN dimension_list R_PAREN   (rule 207)
    type_variable_item  ->  VARIABLE_NAME .   (rule 223)
    type_variable_item  ->  VARIABLE_NAME . STAR INTEGER_CONSTANT   (rule 226)
    type_variable_item  ->  VARIABLE_NAME . STAR L_PAREN expression R_PAREN   (rule 227)
    type_variable_item  ->  VARIABLE_NAME . STAR L_PAREN STAR R_PAREN   (rule 228)

    L_PAREN	shift, and go to state 240
    STAR	shift, and go to state 318

    $default	reduce using rule 223 (type_variable_item)



state 199

    function_statement  ->  type_specifier FUNCTION . base_function_spec END_OF_STATEMENT   (rule 250)

    VARIABLE_NAME	shift, and go to state 160

    base_function_spec	go to state 319
    base_function_name	go to state 162



state 200

    type_variable_item  ->  array_declarator .   (rule 224)
    type_variable_item  ->  array_declarator . STAR INTEGER_CONSTANT   (rule 225)

    STAR	shift, and go to state 320

    $default	reduce using rule 224 (type_variable_item)



state 201

    type_definition_statement  ->  type_specifier type_variable_list . END_OF_STATEMENT   (rule 218)
    type_variable_list  ->  type_variable_list . COMMA extended_type_variable_item   (rule 220)

    END_OF_STATEMENT	shift, and go to state 321
    COMMA	shift, and go to state 322



state 202

    type_variable_list  ->  extended_type_variable_item .   (rule 219)

    $default	reduce using rule 219 (type_variable_list)



state 203

    extended_type_variable_item  ->  type_variable_item .   (rule 221)
    extended_type_variable_item  ->  type_variable_item . SLASH value_list SLASH   (rule 222)

    SLASH	shift, and go to state 323

    $default	reduce using rule 221 (extended_type_variable_item)



state 204

    include_statement  ->  INCLUDE_T PASS_TEXT QUOTE . END_OF_STATEMENT   (rule 108)

    END_OF_STATEMENT	shift, and go to state 324



state 205

    include_statement  ->  INCLUDE_T L_PAREN PASS_TEXT . R_PAREN QUOTE END_OF_STATEMENT   (rule 106)

    R_PAREN	shift, and go to state 325



state 206

    pass_text  ->  pass_text PASS_TEXT .   (rule 119)

    $default	reduce using rule 119 (pass_text)



state 207

    include_statement  ->  INCLUDE_T pass_text L_PAREN . PASS_TEXT R_PAREN QUOTE END_OF_STATEMENT   (rule 107)

    PASS_TEXT	shift, and go to state 326



state 208

    format_statement  ->  FORMAT_STATEMENT pass_text END_OF_STATEMENT .   (rule 109)

    $default	reduce using rule 109 (format_statement)



state 209

    pass_statement  ->  PASS_STATEMENT_T pass_text END_OF_STATEMENT .   (rule 51)

    $default	reduce using rule 51 (pass_statement)



state 210

    open_pass  ->  OPEN_PASS pass_text .   (rule 79)
    open_pass  ->  OPEN_PASS pass_text . QUOTE   (rule 80)
    pass_text  ->  pass_text . PASS_TEXT   (rule 119)

    PASS_TEXT	shift, and go to state 206
    QUOTE	shift, and go to state 327

    $default	reduce using rule 79 (open_pass)



state 211

    open_dump  ->  OPEN_DUMP pass_text .   (rule 77)
    pass_text  ->  pass_text . PASS_TEXT   (rule 119)

    PASS_TEXT	shift, and go to state 206

    $default	reduce using rule 77 (open_dump)



state 212

    open_statement  ->  OPEN_STATEMENT_T open_arg2 R_PAREN . END_OF_STATEMENT   (rule 69)

    END_OF_STATEMENT	shift, and go to state 328



state 213

    open_arg  ->  open_arg COMMA . open_pass   (rule 74)
    open_arg  ->  open_arg COMMA . INTEGER_CONSTANT   (rule 75)
    open_arg  ->  open_arg COMMA . open_dump   (rule 76)

    INTEGER_CONSTANT	shift, and go to state 329
    OPEN_PASS	shift, and go to state 93
    OPEN_DUMP	shift, and go to state 94

    open_dump	go to state 330
    open_pass	go to state 331



state 214

    operation  ->  MUL_OP .   (rule 154)

    $default	reduce using rule 154 (operation)



state 215

    expression  ->  L_PAREN expression . R_PAREN   (rule 138)
    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    R_PAREN	shift, and go to state 332
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227



state 216

    string_element  ->  STRING_ELEMENT .   (rule 162)

    $default	reduce using rule 162 (string_element)



state 217

    string  ->  STRING_START APOS .   (rule 160)

    $default	reduce using rule 160 (string)



state 218

    string  ->  STRING_START string_element . APOS   (rule 159)
    string_element  ->  string_element . STRING_ELEMENT   (rule 163)

    STRING_ELEMENT	shift, and go to state 333
    APOS	shift, and go to state 334



state 219

    io_param  ->  IO_PARAM_NAME EQUALS . pass_text   (rule 104)
    io_param  ->  IO_PARAM_NAME EQUALS . string   (rule 105)

    PASS_TEXT	shift, and go to state 88
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 180

    pass_text	go to state 335
    paren_ref	go to state 183
    string	go to state 336
    substring	go to state 120



state 220

    variable_reference  ->  REFERENCE L_PAREN . expression R_PAREN   (rule 126)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 337
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 221

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  LOGICAL_NOT expression .   (rule 142)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 142 (expression)



state 222

    io_control_list_nonkey  ->  IO_STATEMENT expression APOS . expression   (rule 99)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 338
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 223

    expression  ->  expression CONCAT . expression   (rule 144)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 339
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 224

    expression  ->  expression LOGICAL_OP . expression   (rule 141)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 340
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 225

    expression  ->  expression ADD_OP . expression   (rule 139)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 341
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 226

    expression  ->  expression MUL_OP . expression   (rule 140)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 342
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 227

    expression  ->  expression EXP_OP . expression   (rule 143)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 343
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 228

    expression  ->  operation L_PAREN . expression R_PAREN   (rule 137)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 344
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 229

    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list R_PAREN   (rule 127)
    paren_ref  ->  VARIABLE_NAME . L_PAREN R_PAREN   (rule 128)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list R_PAREN   (rule 129)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list COMMA R_PAREN   (rule 130)
    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list COMMA R_PAREN   (rule 131)
    expression  ->  operation VARIABLE_NAME .   (rule 134)
    substring  ->  VARIABLE_NAME . L_PAREN expression COLON expression R_PAREN   (rule 164)
    substring  ->  VARIABLE_NAME . L_PAREN COLON expression R_PAREN   (rule 165)
    substring  ->  VARIABLE_NAME . L_PAREN expression COLON R_PAREN   (rule 166)

    L_PAREN	shift, and go to state 149

    $default	reduce using rule 134 (expression)



state 230

    expression  ->  operation paren_ref .   (rule 135)
    substring  ->  paren_ref . L_PAREN expression COLON expression R_PAREN   (rule 167)
    substring  ->  paren_ref . L_PAREN COLON expression R_PAREN   (rule 168)
    substring  ->  paren_ref . L_PAREN expression COLON R_PAREN   (rule 169)

    L_PAREN	shift, and go to state 192

    $default	reduce using rule 135 (expression)



state 231

    expression  ->  operation literal .   (rule 136)

    $default	reduce using rule 136 (expression)



state 232

    comment_statement_out  ->  COMMENT_STATEMENT_OUT pass_text END_OF_STATEMENT .   (rule 68)

    $default	reduce using rule 68 (comment_statement_out)



state 233

    encode_decode_statement  ->  ENCODE_DECODE L_PAREN expression . COMMA format_spec COMMA encode_optional R_PAREN pass_text END_OF_STATEMENT   (rule 82)
    encode_decode_statement  ->  ENCODE_DECODE L_PAREN expression . COMMA format_spec COMMA encode_optional R_PAREN END_OF_STATEMENT   (rule 83)
    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227
    COMMA	shift, and go to state 345



state 234

    do_limit  ->  INTEGER_CONSTANT COMMA .   (rule 113)

    $default	reduce using rule 113 (do_limit)



state 235

    do_statement  ->  DO_STATEMENT do_limit pass_text . END_OF_STATEMENT   (rule 110)
    pass_text  ->  pass_text . PASS_TEXT   (rule 119)

    END_OF_STATEMENT	shift, and go to state 346
    PASS_TEXT	shift, and go to state 206



state 236

    do_statement  ->  DO_STATEMENT pass_text END_OF_STATEMENT .   (rule 111)

    $default	reduce using rule 111 (do_statement)



state 237

    end_do_statement  ->  END_DO_STATEMENT pass_text END_OF_STATEMENT .   (rule 115)

    $default	reduce using rule 115 (end_do_statement)



state 238

    end_if_statement  ->  END_IF_STATEMENT pass_text END_OF_STATEMENT .   (rule 117)

    $default	reduce using rule 117 (end_if_statement)



state 239

    computed_goto_statement  ->  COMPUTED_GOTO_STATEMENT pass_text END_OF_STATEMENT .   (rule 173)

    $default	reduce using rule 173 (computed_goto_statement)



state 240

    array_declarator  ->  VARIABLE_NAME L_PAREN . dimension_list R_PAREN   (rule 207)

    INTEGER_CONSTANT	shift, and go to state 347
    VARIABLE_NAME	shift, and go to state 348
    ADD_OP	shift, and go to state 349

    dimension_list	go to state 350
    dimension_element	go to state 351
    dimension_atom	go to state 352



state 241

    common_block_name  ->  SLASH VARIABLE_NAME . SLASH common_item   (rule 239)

    SLASH	shift, and go to state 353



state 242

    common_block_name  ->  SLASH SLASH . common_item   (rule 240)

    VARIABLE_NAME	shift, and go to state 135

    array_declarator	go to state 137
    common_item	go to state 354



state 243

    common_statement  ->  COMMON_STATEMENT common_block_list END_OF_STATEMENT .   (rule 237)

    $default	reduce using rule 237 (common_statement)



state 244

    common_block_list  ->  common_block_list COMMA . common_block_name   (rule 243)
    common_block_list  ->  common_block_list COMMA . common_item   (rule 244)

    VARIABLE_NAME	shift, and go to state 135
    SLASH	shift, and go to state 136

    array_declarator	go to state 137
    common_block_name	go to state 355
    common_item	go to state 356



state 245

    common_block_list  ->  common_block_list common_block_name .   (rule 242)

    $default	reduce using rule 242 (common_block_list)



state 246

    common_item_list  ->  common_item_list COMMA . common_item   (rule 248)

    VARIABLE_NAME	shift, and go to state 135

    array_declarator	go to state 137
    common_item	go to state 357



state 247

    common_statement  ->  COMMON_STATEMENT common_item_list common_block_list . END_OF_STATEMENT   (rule 238)
    common_block_list  ->  common_block_list . common_block_name   (rule 242)
    common_block_list  ->  common_block_list . COMMA common_block_name   (rule 243)
    common_block_list  ->  common_block_list . COMMA common_item   (rule 244)

    END_OF_STATEMENT	shift, and go to state 358
    SLASH	shift, and go to state 136
    COMMA	shift, and go to state 244

    common_block_name	go to state 245



state 248

    paren_ref  ->  VARIABLE_NAME L_PAREN . arg_list R_PAREN   (rule 127)
    paren_ref  ->  VARIABLE_NAME L_PAREN . R_PAREN   (rule 128)
    paren_ref  ->  VARIABLE_NAME L_PAREN . COMMA arg_list R_PAREN   (rule 129)
    paren_ref  ->  VARIABLE_NAME L_PAREN . COMMA arg_list COMMA R_PAREN   (rule 130)
    paren_ref  ->  VARIABLE_NAME L_PAREN . arg_list COMMA R_PAREN   (rule 131)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    R_PAREN	shift, and go to state 252
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112
    COMMA	shift, and go to state 254

    arg_list	go to state 255
    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 359
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 249

    intrinsic_or_extern_statement  ->  INTRINSIC_OR_EXTERN_STATEMENT variable_list END_OF_STATEMENT .   (rule 191)

    $default	reduce using rule 191 (intrinsic_or_extern_statement)



state 250

    variable_list  ->  variable_list COMMA . variable_list_element   (rule 258)

    VARIABLE_NAME	shift, and go to state 142
    STAR	shift, and go to state 143

    paren_ref	go to state 144
    structure_ref	go to state 145
    variable_list_element	go to state 360



state 251

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    arithmetic_statement  ->  VARIABLE_NAME EQUALS expression . END_OF_STATEMENT   (rule 278)

    END_OF_STATEMENT	shift, and go to state 361
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227



state 252

    paren_ref  ->  VARIABLE_NAME L_PAREN R_PAREN .   (rule 128)

    $default	reduce using rule 128 (paren_ref)



state 253

    substring  ->  VARIABLE_NAME L_PAREN COLON . expression R_PAREN   (rule 165)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 362
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 254

    arg_list  ->  COMMA . COMMA   (rule 124)
    arg_list  ->  COMMA . COMMA expression   (rule 125)
    paren_ref  ->  VARIABLE_NAME L_PAREN COMMA . arg_list R_PAREN   (rule 129)
    paren_ref  ->  VARIABLE_NAME L_PAREN COMMA . arg_list COMMA R_PAREN   (rule 130)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112
    COMMA	shift, and go to state 363

    arg_list	go to state 364
    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 359
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 255

    arg_list  ->  arg_list . COMMA expression   (rule 121)
    arg_list  ->  arg_list . COMMA COMMA   (rule 122)
    arg_list  ->  arg_list . COMMA COMMA expression   (rule 123)
    paren_ref  ->  VARIABLE_NAME L_PAREN arg_list . R_PAREN   (rule 127)
    paren_ref  ->  VARIABLE_NAME L_PAREN arg_list . COMMA R_PAREN   (rule 131)

    R_PAREN	shift, and go to state 365
    COMMA	shift, and go to state 366



state 256

    arg_list  ->  expression .   (rule 120)
    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    substring  ->  VARIABLE_NAME L_PAREN expression . COLON expression R_PAREN   (rule 164)
    substring  ->  VARIABLE_NAME L_PAREN expression . COLON R_PAREN   (rule 166)

    COLON	shift, and go to state 367
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 120 (arg_list)



state 257

    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list R_PAREN   (rule 127)
    paren_ref  ->  VARIABLE_NAME . L_PAREN R_PAREN   (rule 128)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list R_PAREN   (rule 129)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list COMMA R_PAREN   (rule 130)
    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list COMMA R_PAREN   (rule 131)
    structure_ref  ->  VARIABLE_NAME DOT VARIABLE_NAME .   (rule 148)

    L_PAREN	shift, and go to state 248

    $default	reduce using rule 148 (structure_ref)



state 258

    structure_ref  ->  VARIABLE_NAME DOT paren_ref .   (rule 152)

    $default	reduce using rule 152 (structure_ref)



state 259

    implicit_statement  ->  IMPLICIT_STATEMENT implicit_specifier_list END_OF_STATEMENT .   (rule 183)

    $default	reduce using rule 183 (implicit_statement)



state 260

    implicit_specifier_list  ->  implicit_specifier_list COMMA . implicit_specifier_item   (rule 185)

    BYTE_TYPE	shift, and go to state 15
    LOGICAL_TYPE	shift, and go to state 16
    INTEGER_TYPE	shift, and go to state 17
    REAL_TYPE	shift, and go to state 18
    DOUBLE_TYPE	shift, and go to state 19
    COMPLEX_TYPE	shift, and go to state 20
    DOUBLE_COMPLEX_TYPE	shift, and go to state 21
    CHARACTER_TYPE	shift, and go to state 22

    base_type	go to state 69
    implicit_specifier_item	go to state 368
    type_specifier	go to state 153



state 261

    implicit_specifier_item  ->  type_specifier L_PAREN . implicit_specifier_code_list R_PAREN   (rule 186)

    CHAR	shift, and go to state 369

    implicit_specifier_code_list	go to state 370
    implicit_specifier_code	go to state 371



state 262

    equivalence_item  ->  VARIABLE_NAME .   (rule 202)
    array_declarator  ->  VARIABLE_NAME . L_PAREN dimension_list R_PAREN   (rule 207)

    L_PAREN	shift, and go to state 240

    $default	reduce using rule 202 (equivalence_item)



state 263

    equivalence_list  ->  L_PAREN equivalence_group . R_PAREN   (rule 198)
    equivalence_group  ->  equivalence_group . COMMA equivalence_item   (rule 201)

    R_PAREN	shift, and go to state 372
    COMMA	shift, and go to state 373



state 264

    equivalence_group  ->  equivalence_item .   (rule 200)

    $default	reduce using rule 200 (equivalence_group)



state 265

    equivalence_item  ->  array_declarator .   (rule 203)

    $default	reduce using rule 203 (equivalence_item)



state 266

    equivalence_statement  ->  EQUIVALENCE_STATEMENT COMMA equivalence_list . END_OF_STATEMENT   (rule 197)
    equivalence_list  ->  equivalence_list . COMMA L_PAREN equivalence_group R_PAREN   (rule 199)

    END_OF_STATEMENT	shift, and go to state 374
    COMMA	shift, and go to state 268



state 267

    equivalence_statement  ->  EQUIVALENCE_STATEMENT equivalence_list END_OF_STATEMENT .   (rule 196)

    $default	reduce using rule 196 (equivalence_statement)



state 268

    equivalence_list  ->  equivalence_list COMMA . L_PAREN equivalence_group R_PAREN   (rule 199)

    L_PAREN	shift, and go to state 375



state 269

    dimension_statement  ->  DIMENSION_STATEMENT array_list END_OF_STATEMENT .   (rule 204)

    $default	reduce using rule 204 (dimension_statement)



state 270

    array_list  ->  array_list COMMA . array_declarator   (rule 206)

    VARIABLE_NAME	shift, and go to state 157

    array_declarator	go to state 376



state 271

    base_function_name  ->  VARIABLE_NAME STAR . INTEGER_CONSTANT   (rule 255)
    base_function_name  ->  VARIABLE_NAME STAR . L_PAREN STAR R_PAREN   (rule 256)

    INTEGER_CONSTANT	shift, and go to state 377
    L_PAREN	shift, and go to state 378



state 272

    function_statement  ->  FUNCTION base_function_spec END_OF_STATEMENT .   (rule 249)

    $default	reduce using rule 249 (function_statement)



state 273

    base_function_spec  ->  base_function_name L_PAREN . variable_list R_PAREN   (rule 252)
    base_function_spec  ->  base_function_name L_PAREN . R_PAREN   (rule 253)

    R_PAREN	shift, and go to state 379
    VARIABLE_NAME	shift, and go to state 142
    STAR	shift, and go to state 143

    paren_ref	go to state 144
    structure_ref	go to state 145
    variable_list	go to state 380
    variable_list_element	go to state 147



state 274

    subroutine_statement  ->  SUBROUTINE VARIABLE_NAME END_OF_STATEMENT .   (rule 264)

    $default	reduce using rule 264 (subroutine_statement)



state 275

    subroutine_statement  ->  SUBROUTINE VARIABLE_NAME L_PAREN . variable_list R_PAREN END_OF_STATEMENT   (rule 263)
    subroutine_statement  ->  SUBROUTINE VARIABLE_NAME L_PAREN . R_PAREN END_OF_STATEMENT   (rule 265)

    R_PAREN	shift, and go to state 381
    VARIABLE_NAME	shift, and go to state 142
    STAR	shift, and go to state 143

    paren_ref	go to state 144
    structure_ref	go to state 145
    variable_list	go to state 382
    variable_list_element	go to state 147



state 276

    namelist_group  ->  SLASH VARIABLE_NAME . SLASH   (rule 271)

    SLASH	shift, and go to state 383



state 277

    namelist_statement  ->  NAMELIST namelist_list END_OF_STATEMENT .   (rule 266)

    $default	reduce using rule 266 (namelist_statement)



state 278

    namelist_list  ->  namelist_list COMMA . VARIABLE_NAME   (rule 268)
    namelist_list  ->  namelist_list COMMA . namelist_group VARIABLE_NAME   (rule 270)

    VARIABLE_NAME	shift, and go to state 384
    SLASH	shift, and go to state 164

    namelist_group	go to state 385



state 279

    namelist_list  ->  namelist_list namelist_group . VARIABLE_NAME   (rule 269)

    VARIABLE_NAME	shift, and go to state 386



state 280

    namelist_list  ->  namelist_group VARIABLE_NAME .   (rule 267)

    $default	reduce using rule 267 (namelist_list)



state 281

    parameter_list  ->  VARIABLE_NAME . EQUALS expression   (rule 274)

    EQUALS	shift, and go to state 387



state 282

    parameter_statement  ->  PARAMETER L_PAREN parameter_list . R_PAREN END_OF_STATEMENT   (rule 273)
    parameter_list  ->  parameter_list . COMMA VARIABLE_NAME EQUALS expression   (rule 275)

    R_PAREN	shift, and go to state 388
    COMMA	shift, and go to state 389



state 283

    vax_parameter_list  ->  VARIABLE_NAME EQUALS . expression   (rule 276)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 390
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 284

    parameter_statement  ->  PARAMETER vax_parameter_list END_OF_STATEMENT .   (rule 272)

    $default	reduce using rule 272 (parameter_statement)



state 285

    vax_parameter_list  ->  vax_parameter_list COMMA . VARIABLE_NAME EQUALS expression   (rule 277)

    VARIABLE_NAME	shift, and go to state 391



state 286

    data_statement  ->  DATA pass_text END_OF_STATEMENT .   (rule 284)

    $default	reduce using rule 284 (data_statement)



state 287

    arithmetic_statement  ->  CALL VARIABLE_NAME END_OF_STATEMENT .   (rule 282)

    $default	reduce using rule 282 (arithmetic_statement)



state 288

    arithmetic_statement  ->  CALL paren_ref END_OF_STATEMENT .   (rule 281)

    $default	reduce using rule 281 (arithmetic_statement)



state 289

    global_function_statement  ->  GLOBAL_FUNCTION VARIABLE_NAME STAR . VARIABLE_NAME STAR signed_integer global_call_spec END_OF_STATEMENT   (rule 36)

    VARIABLE_NAME	shift, and go to state 392



state 290

    global_call_spec  ->  L_PAREN . R_PAREN   (rule 37)
    global_call_spec  ->  L_PAREN . global_arg_list R_PAREN   (rule 38)

    R_PAREN	shift, and go to state 393
    VARIABLE_NAME	shift, and go to state 394

    global_arg_list	go to state 395
    global_arg_item	go to state 396



state 291

    global_subroutine_statement  ->  GLOBAL_SUBROUTINE VARIABLE_NAME global_call_spec . END_OF_STATEMENT   (rule 45)

    END_OF_STATEMENT	shift, and go to state 397



state 292

    global_common_statement  ->  GLOBAL_COMMON SLASH VARIABLE_NAME . SLASH global_common_list END_OF_STATEMENT   (rule 46)

    SLASH	shift, and go to state 398



state 293

    global_common_statement  ->  GLOBAL_COMMON SLASH SLASH . global_common_list END_OF_STATEMENT   (rule 47)

    VARIABLE_NAME	shift, and go to state 399

    global_common_list	go to state 400
    global_common_item	go to state 401



state 294

    if_statement  ->  base_if INTEGER_CONSTANT COMMA . INTEGER_CONSTANT COMMA INTEGER_CONSTANT END_OF_STATEMENT   (rule 53)

    INTEGER_CONSTANT	shift, and go to state 402



state 295

    if_statement  ->  base_if THEN_T END_OF_STATEMENT .   (rule 54)

    $default	reduce using rule 54 (if_statement)



state 296

    if_statement  ->  base_if pass_text END_OF_STATEMENT .   (rule 55)

    $default	reduce using rule 55 (if_statement)



state 297

    base_if  ->  if_statement_start logical_arguement R_PAREN .   (rule 57)

    $default	reduce using rule 57 (base_if)



state 298

    logical_arguement  ->  logical_arguement RELATIONAL_OP_T . if_arguement   (rule 61)

    IF_ARGUEMENT	shift, and go to state 179
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 180

    if_arguement	go to state 403
    paren_ref	go to state 183
    string	go to state 184
    substring	go to state 120



state 299

    base_if  ->  if_statement_start if_arguement R_PAREN .   (rule 56)

    $default	reduce using rule 56 (base_if)



state 300

    logical_arguement  ->  if_arguement RELATIONAL_OP_T . if_arguement   (rule 60)

    IF_ARGUEMENT	shift, and go to state 179
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 180

    if_arguement	go to state 404
    paren_ref	go to state 183
    string	go to state 184
    substring	go to state 120



state 301

    if_arguement  ->  if_arguement IF_ARGUEMENT .   (rule 65)

    $default	reduce using rule 65 (if_arguement)



state 302

    if_arguement  ->  if_arguement string .   (rule 64)

    $default	reduce using rule 64 (if_arguement)



state 303

    io_statement  ->  io_control_list pass_text END_OF_STATEMENT .   (rule 93)

    $default	reduce using rule 93 (io_statement)



state 304

    io_control_list_nonkey  ->  io_control_list_nonkey COMMA MUL_OP .   (rule 98)
    operation  ->  MUL_OP .   (rule 154)

    R_PAREN	reduce using rule 98 (io_control_list_nonkey)
    COMMA	reduce using rule 98 (io_control_list_nonkey)
    $default	reduce using rule 154 (operation)



state 305

    io_control_list_key  ->  io_control_list_nonkey COMMA io_param .   (rule 103)

    $default	reduce using rule 103 (io_control_list_key)



state 306

    io_control_list_nonkey  ->  io_control_list_nonkey COMMA expression .   (rule 100)
    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 100 (io_control_list_nonkey)



state 307

    io_control_list_key  ->  io_control_list_key COMMA io_param .   (rule 102)

    $default	reduce using rule 102 (io_control_list_key)



state 308

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    arithmetic_statement  ->  paren_ref EQUALS expression . END_OF_STATEMENT   (rule 280)

    END_OF_STATEMENT	shift, and go to state 405
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227



state 309

    substring  ->  paren_ref L_PAREN COLON . expression R_PAREN   (rule 168)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 406
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 310

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    substring  ->  paren_ref L_PAREN expression . COLON expression R_PAREN   (rule 167)
    substring  ->  paren_ref L_PAREN expression . COLON R_PAREN   (rule 169)

    COLON	shift, and go to state 407
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227



state 311

    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list R_PAREN   (rule 127)
    paren_ref  ->  VARIABLE_NAME . L_PAREN R_PAREN   (rule 128)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list R_PAREN   (rule 129)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list COMMA R_PAREN   (rule 130)
    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list COMMA R_PAREN   (rule 131)
    structure_ref  ->  paren_ref DOT VARIABLE_NAME .   (rule 150)

    L_PAREN	shift, and go to state 248

    $default	reduce using rule 150 (structure_ref)



state 312

    structure_ref  ->  paren_ref DOT paren_ref .   (rule 151)

    $default	reduce using rule 151 (structure_ref)



state 313

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    arithmetic_statement  ->  structure_ref EQUALS expression . END_OF_STATEMENT   (rule 283)

    END_OF_STATEMENT	shift, and go to state 408
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227



state 314

    structure_ref  ->  structure_ref DOT VARIABLE_NAME .   (rule 149)

    $default	reduce using rule 149 (structure_ref)



state 315

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    arithmetic_statement  ->  substring EQUALS expression . END_OF_STATEMENT   (rule 279)

    END_OF_STATEMENT	shift, and go to state 409
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227



state 316

    type_specifier  ->  base_type STAR INTEGER_CONSTANT .   (rule 193)

    $default	reduce using rule 193 (type_specifier)



state 317

    type_specifier  ->  base_type STAR L_PAREN . expression R_PAREN   (rule 194)
    type_specifier  ->  base_type STAR L_PAREN . STAR R_PAREN   (rule 195)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 410
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 411
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 318

    type_variable_item  ->  VARIABLE_NAME STAR . INTEGER_CONSTANT   (rule 226)
    type_variable_item  ->  VARIABLE_NAME STAR . L_PAREN expression R_PAREN   (rule 227)
    type_variable_item  ->  VARIABLE_NAME STAR . L_PAREN STAR R_PAREN   (rule 228)

    INTEGER_CONSTANT	shift, and go to state 412
    L_PAREN	shift, and go to state 413



state 319

    function_statement  ->  type_specifier FUNCTION base_function_spec . END_OF_STATEMENT   (rule 250)

    END_OF_STATEMENT	shift, and go to state 414



state 320

    type_variable_item  ->  array_declarator STAR . INTEGER_CONSTANT   (rule 225)

    INTEGER_CONSTANT	shift, and go to state 415



state 321

    type_definition_statement  ->  type_specifier type_variable_list END_OF_STATEMENT .   (rule 218)

    $default	reduce using rule 218 (type_definition_statement)



state 322

    type_variable_list  ->  type_variable_list COMMA . extended_type_variable_item   (rule 220)

    VARIABLE_NAME	shift, and go to state 198

    array_declarator	go to state 200
    extended_type_variable_item	go to state 416
    type_variable_item	go to state 203



state 323

    extended_type_variable_item  ->  type_variable_item SLASH . value_list SLASH   (rule 222)

    INTEGER_CONSTANT	shift, and go to state 417
    REAL_CONSTANT	shift, and go to state 418
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 419

    paren_ref	go to state 183
    string	go to state 420
    substring	go to state 120
    value_list	go to state 421
    value_element	go to state 422
    value_atom	go to state 423



state 324

    include_statement  ->  INCLUDE_T PASS_TEXT QUOTE END_OF_STATEMENT .   (rule 108)

    $default	reduce using rule 108 (include_statement)



state 325

    include_statement  ->  INCLUDE_T L_PAREN PASS_TEXT R_PAREN . QUOTE END_OF_STATEMENT   (rule 106)

    QUOTE	shift, and go to state 424



state 326

    include_statement  ->  INCLUDE_T pass_text L_PAREN PASS_TEXT . R_PAREN QUOTE END_OF_STATEMENT   (rule 107)

    R_PAREN	shift, and go to state 425



state 327

    open_pass  ->  OPEN_PASS pass_text QUOTE .   (rule 80)

    $default	reduce using rule 80 (open_pass)



state 328

    open_statement  ->  OPEN_STATEMENT_T open_arg2 R_PAREN END_OF_STATEMENT .   (rule 69)

    $default	reduce using rule 69 (open_statement)



state 329

    open_arg  ->  open_arg COMMA INTEGER_CONSTANT .   (rule 75)

    $default	reduce using rule 75 (open_arg)



state 330

    open_arg  ->  open_arg COMMA open_dump .   (rule 76)

    $default	reduce using rule 76 (open_arg)



state 331

    open_arg  ->  open_arg COMMA open_pass .   (rule 74)

    $default	reduce using rule 74 (open_arg)



state 332

    expression  ->  L_PAREN expression R_PAREN .   (rule 138)

    $default	reduce using rule 138 (expression)



state 333

    string_element  ->  string_element STRING_ELEMENT .   (rule 163)

    $default	reduce using rule 163 (string_element)



state 334

    string  ->  STRING_START string_element APOS .   (rule 159)

    $default	reduce using rule 159 (string)



state 335

    io_param  ->  IO_PARAM_NAME EQUALS pass_text .   (rule 104)
    pass_text  ->  pass_text . PASS_TEXT   (rule 119)

    PASS_TEXT	shift, and go to state 206

    $default	reduce using rule 104 (io_param)



state 336

    io_param  ->  IO_PARAM_NAME EQUALS string .   (rule 105)

    $default	reduce using rule 105 (io_param)



state 337

    variable_reference  ->  REFERENCE L_PAREN expression . R_PAREN   (rule 126)
    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    R_PAREN	shift, and go to state 426
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227



state 338

    io_control_list_nonkey  ->  IO_STATEMENT expression APOS expression .   (rule 99)
    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 99 (io_control_list_nonkey)



state 339

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    expression  ->  expression CONCAT expression .   (rule 144)

    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 144 (expression)



state 340

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression LOGICAL_OP expression .   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 141 (expression)



state 341

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression ADD_OP expression .   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 139 (expression)



state 342

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression MUL_OP expression .   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    EXP_OP	shift, and go to state 227

    $default	reduce using rule 140 (expression)



state 343

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression EXP_OP expression .   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    EXP_OP	shift, and go to state 227

    $default	reduce using rule 143 (expression)



state 344

    expression  ->  operation L_PAREN expression . R_PAREN   (rule 137)
    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    R_PAREN	shift, and go to state 427
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227



state 345

    encode_decode_statement  ->  ENCODE_DECODE L_PAREN expression COMMA . format_spec COMMA encode_optional R_PAREN pass_text END_OF_STATEMENT   (rule 82)
    encode_decode_statement  ->  ENCODE_DECODE L_PAREN expression COMMA . format_spec COMMA encode_optional R_PAREN END_OF_STATEMENT   (rule 83)

    INTEGER_CONSTANT	shift, and go to state 428
    VARIABLE_NAME	shift, and go to state 429

    format_spec	go to state 430



state 346

    do_statement  ->  DO_STATEMENT do_limit pass_text END_OF_STATEMENT .   (rule 110)

    $default	reduce using rule 110 (do_statement)



state 347

    dimension_atom  ->  INTEGER_CONSTANT .   (rule 212)

    $default	reduce using rule 212 (dimension_atom)



state 348

    dimension_atom  ->  VARIABLE_NAME .   (rule 213)

    $default	reduce using rule 213 (dimension_atom)



state 349

    dimension_atom  ->  ADD_OP . INTEGER_CONSTANT   (rule 216)
    dimension_atom  ->  ADD_OP . VARIABLE_NAME   (rule 217)

    INTEGER_CONSTANT	shift, and go to state 431
    VARIABLE_NAME	shift, and go to state 432



state 350

    array_declarator  ->  VARIABLE_NAME L_PAREN dimension_list . R_PAREN   (rule 207)
    dimension_list  ->  dimension_list . COMMA dimension_element   (rule 209)

    R_PAREN	shift, and go to state 433
    COMMA	shift, and go to state 434



state 351

    dimension_list  ->  dimension_element .   (rule 208)

    $default	reduce using rule 208 (dimension_list)



state 352

    dimension_element  ->  dimension_atom .   (rule 210)
    dimension_element  ->  dimension_atom . COLON dimension_atom   (rule 211)
    dimension_atom  ->  dimension_atom . operation INTEGER_CONSTANT   (rule 214)
    dimension_atom  ->  dimension_atom . operation VARIABLE_NAME   (rule 215)

    STAR	shift, and go to state 105
    COLON	shift, and go to state 435
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    $default	reduce using rule 210 (dimension_element)

    operation	go to state 436



state 353

    common_block_name  ->  SLASH VARIABLE_NAME SLASH . common_item   (rule 239)

    VARIABLE_NAME	shift, and go to state 135

    array_declarator	go to state 137
    common_item	go to state 437



state 354

    common_block_name  ->  SLASH SLASH common_item .   (rule 240)

    $default	reduce using rule 240 (common_block_name)



state 355

    common_block_list  ->  common_block_list COMMA common_block_name .   (rule 243)

    $default	reduce using rule 243 (common_block_list)



state 356

    common_block_list  ->  common_block_list COMMA common_item .   (rule 244)

    $default	reduce using rule 244 (common_block_list)



state 357

    common_item_list  ->  common_item_list COMMA common_item .   (rule 248)

    $default	reduce using rule 248 (common_item_list)



state 358

    common_statement  ->  COMMON_STATEMENT common_item_list common_block_list END_OF_STATEMENT .   (rule 238)

    $default	reduce using rule 238 (common_statement)



state 359

    arg_list  ->  expression .   (rule 120)
    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 120 (arg_list)



state 360

    variable_list  ->  variable_list COMMA variable_list_element .   (rule 258)

    $default	reduce using rule 258 (variable_list)



state 361

    arithmetic_statement  ->  VARIABLE_NAME EQUALS expression END_OF_STATEMENT .   (rule 278)

    $default	reduce using rule 278 (arithmetic_statement)



state 362

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    substring  ->  VARIABLE_NAME L_PAREN COLON expression . R_PAREN   (rule 165)

    R_PAREN	shift, and go to state 438
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227



state 363

    arg_list  ->  COMMA . COMMA   (rule 124)
    arg_list  ->  COMMA COMMA .   (rule 124)
    arg_list  ->  COMMA . COMMA expression   (rule 125)
    arg_list  ->  COMMA COMMA . expression   (rule 125)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112
    COMMA	shift, and go to state 439

    $default	reduce using rule 124 (arg_list)

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 440
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 364

    arg_list  ->  arg_list . COMMA expression   (rule 121)
    arg_list  ->  arg_list . COMMA COMMA   (rule 122)
    arg_list  ->  arg_list . COMMA COMMA expression   (rule 123)
    paren_ref  ->  VARIABLE_NAME L_PAREN COMMA arg_list . R_PAREN   (rule 129)
    paren_ref  ->  VARIABLE_NAME L_PAREN COMMA arg_list . COMMA R_PAREN   (rule 130)

    R_PAREN	shift, and go to state 441
    COMMA	shift, and go to state 442



state 365

    paren_ref  ->  VARIABLE_NAME L_PAREN arg_list R_PAREN .   (rule 127)

    $default	reduce using rule 127 (paren_ref)



state 366

    arg_list  ->  arg_list COMMA . expression   (rule 121)
    arg_list  ->  arg_list COMMA . COMMA   (rule 122)
    arg_list  ->  arg_list COMMA . COMMA expression   (rule 123)
    paren_ref  ->  VARIABLE_NAME L_PAREN arg_list COMMA . R_PAREN   (rule 131)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    R_PAREN	shift, and go to state 443
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112
    COMMA	shift, and go to state 444

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 445
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 367

    substring  ->  VARIABLE_NAME L_PAREN expression COLON . expression R_PAREN   (rule 164)
    substring  ->  VARIABLE_NAME L_PAREN expression COLON . R_PAREN   (rule 166)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    R_PAREN	shift, and go to state 446
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 447
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 368

    implicit_specifier_list  ->  implicit_specifier_list COMMA implicit_specifier_item .   (rule 185)

    $default	reduce using rule 185 (implicit_specifier_list)



state 369

    implicit_specifier_code  ->  CHAR .   (rule 189)
    implicit_specifier_code  ->  CHAR . DASH CHAR   (rule 190)

    DASH	shift, and go to state 448

    $default	reduce using rule 189 (implicit_specifier_code)



state 370

    implicit_specifier_item  ->  type_specifier L_PAREN implicit_specifier_code_list . R_PAREN   (rule 186)

    R_PAREN	shift, and go to state 449



state 371

    implicit_specifier_code_list  ->  implicit_specifier_code .   (rule 187)
    implicit_specifier_code_list  ->  implicit_specifier_code . COMMA implicit_specifier_code   (rule 188)

    COMMA	shift, and go to state 450

    $default	reduce using rule 187 (implicit_specifier_code_list)



state 372

    equivalence_list  ->  L_PAREN equivalence_group R_PAREN .   (rule 198)

    $default	reduce using rule 198 (equivalence_list)



state 373

    equivalence_group  ->  equivalence_group COMMA . equivalence_item   (rule 201)

    VARIABLE_NAME	shift, and go to state 262

    equivalence_item	go to state 451
    array_declarator	go to state 265



state 374

    equivalence_statement  ->  EQUIVALENCE_STATEMENT COMMA equivalence_list END_OF_STATEMENT .   (rule 197)

    $default	reduce using rule 197 (equivalence_statement)



state 375

    equivalence_list  ->  equivalence_list COMMA L_PAREN . equivalence_group R_PAREN   (rule 199)

    VARIABLE_NAME	shift, and go to state 262

    equivalence_group	go to state 452
    equivalence_item	go to state 264
    array_declarator	go to state 265



state 376

    array_list  ->  array_list COMMA array_declarator .   (rule 206)

    $default	reduce using rule 206 (array_list)



state 377

    base_function_name  ->  VARIABLE_NAME STAR INTEGER_CONSTANT .   (rule 255)

    $default	reduce using rule 255 (base_function_name)



state 378

    base_function_name  ->  VARIABLE_NAME STAR L_PAREN . STAR R_PAREN   (rule 256)

    STAR	shift, and go to state 453



state 379

    base_function_spec  ->  base_function_name L_PAREN R_PAREN .   (rule 253)

    $default	reduce using rule 253 (base_function_spec)



state 380

    base_function_spec  ->  base_function_name L_PAREN variable_list . R_PAREN   (rule 252)
    variable_list  ->  variable_list . COMMA variable_list_element   (rule 258)

    R_PAREN	shift, and go to state 454
    COMMA	shift, and go to state 250



state 381

    subroutine_statement  ->  SUBROUTINE VARIABLE_NAME L_PAREN R_PAREN . END_OF_STATEMENT   (rule 265)

    END_OF_STATEMENT	shift, and go to state 455



state 382

    variable_list  ->  variable_list . COMMA variable_list_element   (rule 258)
    subroutine_statement  ->  SUBROUTINE VARIABLE_NAME L_PAREN variable_list . R_PAREN END_OF_STATEMENT   (rule 263)

    R_PAREN	shift, and go to state 456
    COMMA	shift, and go to state 250



state 383

    namelist_group  ->  SLASH VARIABLE_NAME SLASH .   (rule 271)

    $default	reduce using rule 271 (namelist_group)



state 384

    namelist_list  ->  namelist_list COMMA VARIABLE_NAME .   (rule 268)

    $default	reduce using rule 268 (namelist_list)



state 385

    namelist_list  ->  namelist_list COMMA namelist_group . VARIABLE_NAME   (rule 270)

    VARIABLE_NAME	shift, and go to state 457



state 386

    namelist_list  ->  namelist_list namelist_group VARIABLE_NAME .   (rule 269)

    $default	reduce using rule 269 (namelist_list)



state 387

    parameter_list  ->  VARIABLE_NAME EQUALS . expression   (rule 274)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 458
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 388

    parameter_statement  ->  PARAMETER L_PAREN parameter_list R_PAREN . END_OF_STATEMENT   (rule 273)

    END_OF_STATEMENT	shift, and go to state 459



state 389

    parameter_list  ->  parameter_list COMMA . VARIABLE_NAME EQUALS expression   (rule 275)

    VARIABLE_NAME	shift, and go to state 460



state 390

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    vax_parameter_list  ->  VARIABLE_NAME EQUALS expression .   (rule 276)

    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 276 (vax_parameter_list)



state 391

    vax_parameter_list  ->  vax_parameter_list COMMA VARIABLE_NAME . EQUALS expression   (rule 277)

    EQUALS	shift, and go to state 461



state 392

    global_function_statement  ->  GLOBAL_FUNCTION VARIABLE_NAME STAR VARIABLE_NAME . STAR signed_integer global_call_spec END_OF_STATEMENT   (rule 36)

    STAR	shift, and go to state 462



state 393

    global_call_spec  ->  L_PAREN R_PAREN .   (rule 37)

    $default	reduce using rule 37 (global_call_spec)



state 394

    global_arg_item  ->  VARIABLE_NAME . STAR signed_integer   (rule 41)

    STAR	shift, and go to state 463



state 395

    global_call_spec  ->  L_PAREN global_arg_list . R_PAREN   (rule 38)
    global_arg_list  ->  global_arg_list . COMMA global_arg_item   (rule 40)

    R_PAREN	shift, and go to state 464
    COMMA	shift, and go to state 465



state 396

    global_arg_list  ->  global_arg_item .   (rule 39)
    global_arg_item  ->  global_arg_item . COLON INTEGER_CONSTANT STAR INTEGER_CONSTANT   (rule 42)

    COLON	shift, and go to state 466

    $default	reduce using rule 39 (global_arg_list)



state 397

    global_subroutine_statement  ->  GLOBAL_SUBROUTINE VARIABLE_NAME global_call_spec END_OF_STATEMENT .   (rule 45)

    $default	reduce using rule 45 (global_subroutine_statement)



state 398

    global_common_statement  ->  GLOBAL_COMMON SLASH VARIABLE_NAME SLASH . global_common_list END_OF_STATEMENT   (rule 46)

    VARIABLE_NAME	shift, and go to state 399

    global_common_list	go to state 467
    global_common_item	go to state 401



state 399

    global_common_item  ->  VARIABLE_NAME . STAR INTEGER_CONSTANT STAR INTEGER_CONSTANT   (rule 50)

    STAR	shift, and go to state 468



state 400

    global_common_statement  ->  GLOBAL_COMMON SLASH SLASH global_common_list . END_OF_STATEMENT   (rule 47)
    global_common_list  ->  global_common_list . global_common_item   (rule 49)

    END_OF_STATEMENT	shift, and go to state 469
    VARIABLE_NAME	shift, and go to state 399

    global_common_item	go to state 470



state 401

    global_common_list  ->  global_common_item .   (rule 48)

    $default	reduce using rule 48 (global_common_list)



state 402

    if_statement  ->  base_if INTEGER_CONSTANT COMMA INTEGER_CONSTANT . COMMA INTEGER_CONSTANT END_OF_STATEMENT   (rule 53)

    COMMA	shift, and go to state 471



state 403

    logical_arguement  ->  logical_arguement RELATIONAL_OP_T if_arguement .   (rule 61)
    if_arguement  ->  if_arguement . string   (rule 64)
    if_arguement  ->  if_arguement . IF_ARGUEMENT   (rule 65)

    IF_ARGUEMENT	shift, and go to state 301
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 180

    $default	reduce using rule 61 (logical_arguement)

    paren_ref	go to state 183
    string	go to state 302
    substring	go to state 120



state 404

    logical_arguement  ->  if_arguement RELATIONAL_OP_T if_arguement .   (rule 60)
    if_arguement  ->  if_arguement . string   (rule 64)
    if_arguement  ->  if_arguement . IF_ARGUEMENT   (rule 65)

    IF_ARGUEMENT	shift, and go to state 301
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 180

    $default	reduce using rule 60 (logical_arguement)

    paren_ref	go to state 183
    string	go to state 302
    substring	go to state 120



state 405

    arithmetic_statement  ->  paren_ref EQUALS expression END_OF_STATEMENT .   (rule 280)

    $default	reduce using rule 280 (arithmetic_statement)



state 406

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    substring  ->  paren_ref L_PAREN COLON expression . R_PAREN   (rule 168)

    R_PAREN	shift, and go to state 472
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227



state 407

    substring  ->  paren_ref L_PAREN expression COLON . expression R_PAREN   (rule 167)
    substring  ->  paren_ref L_PAREN expression COLON . R_PAREN   (rule 169)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    R_PAREN	shift, and go to state 473
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 474
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 408

    arithmetic_statement  ->  structure_ref EQUALS expression END_OF_STATEMENT .   (rule 283)

    $default	reduce using rule 283 (arithmetic_statement)



state 409

    arithmetic_statement  ->  substring EQUALS expression END_OF_STATEMENT .   (rule 279)

    $default	reduce using rule 279 (arithmetic_statement)



state 410

    operation  ->  STAR .   (rule 156)
    type_specifier  ->  base_type STAR L_PAREN STAR . R_PAREN   (rule 195)

    R_PAREN	shift, and go to state 475

    $default	reduce using rule 156 (operation)



state 411

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    type_specifier  ->  base_type STAR L_PAREN expression . R_PAREN   (rule 194)

    R_PAREN	shift, and go to state 476
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227



state 412

    type_variable_item  ->  VARIABLE_NAME STAR INTEGER_CONSTANT .   (rule 226)

    $default	reduce using rule 226 (type_variable_item)



state 413

    type_variable_item  ->  VARIABLE_NAME STAR L_PAREN . expression R_PAREN   (rule 227)
    type_variable_item  ->  VARIABLE_NAME STAR L_PAREN . STAR R_PAREN   (rule 228)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 477
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 478
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 414

    function_statement  ->  type_specifier FUNCTION base_function_spec END_OF_STATEMENT .   (rule 250)

    $default	reduce using rule 250 (function_statement)



state 415

    type_variable_item  ->  array_declarator STAR INTEGER_CONSTANT .   (rule 225)

    $default	reduce using rule 225 (type_variable_item)



state 416

    type_variable_list  ->  type_variable_list COMMA extended_type_variable_item .   (rule 220)

    $default	reduce using rule 220 (type_variable_list)



state 417

    value_atom  ->  INTEGER_CONSTANT .   (rule 234)

    $default	reduce using rule 234 (value_atom)



state 418

    value_atom  ->  REAL_CONSTANT .   (rule 235)

    $default	reduce using rule 235 (value_atom)



state 419

    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list R_PAREN   (rule 127)
    paren_ref  ->  VARIABLE_NAME . L_PAREN R_PAREN   (rule 128)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list R_PAREN   (rule 129)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list COMMA R_PAREN   (rule 130)
    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list COMMA R_PAREN   (rule 131)
    substring  ->  VARIABLE_NAME . L_PAREN expression COLON expression R_PAREN   (rule 164)
    substring  ->  VARIABLE_NAME . L_PAREN COLON expression R_PAREN   (rule 165)
    substring  ->  VARIABLE_NAME . L_PAREN expression COLON R_PAREN   (rule 166)
    value_atom  ->  VARIABLE_NAME .   (rule 233)

    L_PAREN	shift, and go to state 149

    $default	reduce using rule 233 (value_atom)



state 420

    value_atom  ->  string .   (rule 236)

    $default	reduce using rule 236 (value_atom)



state 421

    extended_type_variable_item  ->  type_variable_item SLASH value_list . SLASH   (rule 222)
    value_list  ->  value_list . COMMA value_element   (rule 230)

    SLASH	shift, and go to state 479
    COMMA	shift, and go to state 480



state 422

    value_list  ->  value_element .   (rule 229)

    $default	reduce using rule 229 (value_list)



state 423

    value_element  ->  value_atom .   (rule 231)
    value_element  ->  value_atom . STAR value_atom   (rule 232)

    STAR	shift, and go to state 481

    $default	reduce using rule 231 (value_element)



state 424

    include_statement  ->  INCLUDE_T L_PAREN PASS_TEXT R_PAREN QUOTE . END_OF_STATEMENT   (rule 106)

    END_OF_STATEMENT	shift, and go to state 482



state 425

    include_statement  ->  INCLUDE_T pass_text L_PAREN PASS_TEXT R_PAREN . QUOTE END_OF_STATEMENT   (rule 107)

    QUOTE	shift, and go to state 483



state 426

    variable_reference  ->  REFERENCE L_PAREN expression R_PAREN .   (rule 126)

    $default	reduce using rule 126 (variable_reference)



state 427

    expression  ->  operation L_PAREN expression R_PAREN .   (rule 137)

    $default	reduce using rule 137 (expression)



state 428

    format_spec  ->  INTEGER_CONSTANT .   (rule 84)

    $default	reduce using rule 84 (format_spec)



state 429

    format_spec  ->  VARIABLE_NAME .   (rule 85)

    $default	reduce using rule 85 (format_spec)



state 430

    encode_decode_statement  ->  ENCODE_DECODE L_PAREN expression COMMA format_spec . COMMA encode_optional R_PAREN pass_text END_OF_STATEMENT   (rule 82)
    encode_decode_statement  ->  ENCODE_DECODE L_PAREN expression COMMA format_spec . COMMA encode_optional R_PAREN END_OF_STATEMENT   (rule 83)

    COMMA	shift, and go to state 484



state 431

    dimension_atom  ->  ADD_OP INTEGER_CONSTANT .   (rule 216)

    $default	reduce using rule 216 (dimension_atom)



state 432

    dimension_atom  ->  ADD_OP VARIABLE_NAME .   (rule 217)

    $default	reduce using rule 217 (dimension_atom)



state 433

    array_declarator  ->  VARIABLE_NAME L_PAREN dimension_list R_PAREN .   (rule 207)

    $default	reduce using rule 207 (array_declarator)



state 434

    dimension_list  ->  dimension_list COMMA . dimension_element   (rule 209)

    INTEGER_CONSTANT	shift, and go to state 347
    VARIABLE_NAME	shift, and go to state 348
    ADD_OP	shift, and go to state 349

    dimension_element	go to state 485
    dimension_atom	go to state 352



state 435

    dimension_element  ->  dimension_atom COLON . dimension_atom   (rule 211)

    INTEGER_CONSTANT	shift, and go to state 347
    VARIABLE_NAME	shift, and go to state 348
    ADD_OP	shift, and go to state 349

    dimension_atom	go to state 486



state 436

    dimension_atom  ->  dimension_atom operation . INTEGER_CONSTANT   (rule 214)
    dimension_atom  ->  dimension_atom operation . VARIABLE_NAME   (rule 215)

    INTEGER_CONSTANT	shift, and go to state 487
    VARIABLE_NAME	shift, and go to state 488



state 437

    common_block_name  ->  SLASH VARIABLE_NAME SLASH common_item .   (rule 239)

    $default	reduce using rule 239 (common_block_name)



state 438

    substring  ->  VARIABLE_NAME L_PAREN COLON expression R_PAREN .   (rule 165)

    $default	reduce using rule 165 (substring)



state 439

    arg_list  ->  COMMA COMMA .   (rule 124)
    arg_list  ->  COMMA COMMA . expression   (rule 125)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    $default	reduce using rule 124 (arg_list)

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 440
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 440

    arg_list  ->  COMMA COMMA expression .   (rule 125)
    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 125 (arg_list)



state 441

    paren_ref  ->  VARIABLE_NAME L_PAREN COMMA arg_list R_PAREN .   (rule 129)

    $default	reduce using rule 129 (paren_ref)



state 442

    arg_list  ->  arg_list COMMA . expression   (rule 121)
    arg_list  ->  arg_list COMMA . COMMA   (rule 122)
    arg_list  ->  arg_list COMMA . COMMA expression   (rule 123)
    paren_ref  ->  VARIABLE_NAME L_PAREN COMMA arg_list COMMA . R_PAREN   (rule 130)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    R_PAREN	shift, and go to state 489
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112
    COMMA	shift, and go to state 444

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 445
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 443

    paren_ref  ->  VARIABLE_NAME L_PAREN arg_list COMMA R_PAREN .   (rule 131)

    $default	reduce using rule 131 (paren_ref)



state 444

    arg_list  ->  arg_list COMMA COMMA .   (rule 122)
    arg_list  ->  arg_list COMMA COMMA . expression   (rule 123)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    $default	reduce using rule 122 (arg_list)

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 490
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 445

    arg_list  ->  arg_list COMMA expression .   (rule 121)
    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 121 (arg_list)



state 446

    substring  ->  VARIABLE_NAME L_PAREN expression COLON R_PAREN .   (rule 166)

    $default	reduce using rule 166 (substring)



state 447

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    substring  ->  VARIABLE_NAME L_PAREN expression COLON expression . R_PAREN   (rule 164)

    R_PAREN	shift, and go to state 491
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227



state 448

    implicit_specifier_code  ->  CHAR DASH . CHAR   (rule 190)

    CHAR	shift, and go to state 492



state 449

    implicit_specifier_item  ->  type_specifier L_PAREN implicit_specifier_code_list R_PAREN .   (rule 186)

    $default	reduce using rule 186 (implicit_specifier_item)



state 450

    implicit_specifier_code_list  ->  implicit_specifier_code COMMA . implicit_specifier_code   (rule 188)

    CHAR	shift, and go to state 369

    implicit_specifier_code	go to state 493



state 451

    equivalence_group  ->  equivalence_group COMMA equivalence_item .   (rule 201)

    $default	reduce using rule 201 (equivalence_group)



state 452

    equivalence_list  ->  equivalence_list COMMA L_PAREN equivalence_group . R_PAREN   (rule 199)
    equivalence_group  ->  equivalence_group . COMMA equivalence_item   (rule 201)

    R_PAREN	shift, and go to state 494
    COMMA	shift, and go to state 373



state 453

    base_function_name  ->  VARIABLE_NAME STAR L_PAREN STAR . R_PAREN   (rule 256)

    R_PAREN	shift, and go to state 495



state 454

    base_function_spec  ->  base_function_name L_PAREN variable_list R_PAREN .   (rule 252)

    $default	reduce using rule 252 (base_function_spec)



state 455

    subroutine_statement  ->  SUBROUTINE VARIABLE_NAME L_PAREN R_PAREN END_OF_STATEMENT .   (rule 265)

    $default	reduce using rule 265 (subroutine_statement)



state 456

    subroutine_statement  ->  SUBROUTINE VARIABLE_NAME L_PAREN variable_list R_PAREN . END_OF_STATEMENT   (rule 263)

    END_OF_STATEMENT	shift, and go to state 496



state 457

    namelist_list  ->  namelist_list COMMA namelist_group VARIABLE_NAME .   (rule 270)

    $default	reduce using rule 270 (namelist_list)



state 458

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    parameter_list  ->  VARIABLE_NAME EQUALS expression .   (rule 274)

    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 274 (parameter_list)



state 459

    parameter_statement  ->  PARAMETER L_PAREN parameter_list R_PAREN END_OF_STATEMENT .   (rule 273)

    $default	reduce using rule 273 (parameter_statement)



state 460

    parameter_list  ->  parameter_list COMMA VARIABLE_NAME . EQUALS expression   (rule 275)

    EQUALS	shift, and go to state 497



state 461

    vax_parameter_list  ->  vax_parameter_list COMMA VARIABLE_NAME EQUALS . expression   (rule 277)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 498
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 462

    global_function_statement  ->  GLOBAL_FUNCTION VARIABLE_NAME STAR VARIABLE_NAME STAR . signed_integer global_call_spec END_OF_STATEMENT   (rule 36)

    INTEGER_CONSTANT	shift, and go to state 499
    ADD_OP	shift, and go to state 500

    signed_integer	go to state 501



state 463

    global_arg_item  ->  VARIABLE_NAME STAR . signed_integer   (rule 41)

    INTEGER_CONSTANT	shift, and go to state 499
    ADD_OP	shift, and go to state 500

    signed_integer	go to state 502



state 464

    global_call_spec  ->  L_PAREN global_arg_list R_PAREN .   (rule 38)

    $default	reduce using rule 38 (global_call_spec)



state 465

    global_arg_list  ->  global_arg_list COMMA . global_arg_item   (rule 40)

    VARIABLE_NAME	shift, and go to state 394

    global_arg_item	go to state 503



state 466

    global_arg_item  ->  global_arg_item COLON . INTEGER_CONSTANT STAR INTEGER_CONSTANT   (rule 42)

    INTEGER_CONSTANT	shift, and go to state 504



state 467

    global_common_statement  ->  GLOBAL_COMMON SLASH VARIABLE_NAME SLASH global_common_list . END_OF_STATEMENT   (rule 46)
    global_common_list  ->  global_common_list . global_common_item   (rule 49)

    END_OF_STATEMENT	shift, and go to state 505
    VARIABLE_NAME	shift, and go to state 399

    global_common_item	go to state 470



state 468

    global_common_item  ->  VARIABLE_NAME STAR . INTEGER_CONSTANT STAR INTEGER_CONSTANT   (rule 50)

    INTEGER_CONSTANT	shift, and go to state 506



state 469

    global_common_statement  ->  GLOBAL_COMMON SLASH SLASH global_common_list END_OF_STATEMENT .   (rule 47)

    $default	reduce using rule 47 (global_common_statement)



state 470

    global_common_list  ->  global_common_list global_common_item .   (rule 49)

    $default	reduce using rule 49 (global_common_list)



state 471

    if_statement  ->  base_if INTEGER_CONSTANT COMMA INTEGER_CONSTANT COMMA . INTEGER_CONSTANT END_OF_STATEMENT   (rule 53)

    INTEGER_CONSTANT	shift, and go to state 507



state 472

    substring  ->  paren_ref L_PAREN COLON expression R_PAREN .   (rule 168)

    $default	reduce using rule 168 (substring)



state 473

    substring  ->  paren_ref L_PAREN expression COLON R_PAREN .   (rule 169)

    $default	reduce using rule 169 (substring)



state 474

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    substring  ->  paren_ref L_PAREN expression COLON expression . R_PAREN   (rule 167)

    R_PAREN	shift, and go to state 508
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227



state 475

    type_specifier  ->  base_type STAR L_PAREN STAR R_PAREN .   (rule 195)

    $default	reduce using rule 195 (type_specifier)



state 476

    type_specifier  ->  base_type STAR L_PAREN expression R_PAREN .   (rule 194)

    $default	reduce using rule 194 (type_specifier)



state 477

    operation  ->  STAR .   (rule 156)
    type_variable_item  ->  VARIABLE_NAME STAR L_PAREN STAR . R_PAREN   (rule 228)

    R_PAREN	shift, and go to state 509

    $default	reduce using rule 156 (operation)



state 478

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    type_variable_item  ->  VARIABLE_NAME STAR L_PAREN expression . R_PAREN   (rule 227)

    R_PAREN	shift, and go to state 510
    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227



state 479

    extended_type_variable_item  ->  type_variable_item SLASH value_list SLASH .   (rule 222)

    $default	reduce using rule 222 (extended_type_variable_item)



state 480

    value_list  ->  value_list COMMA . value_element   (rule 230)

    INTEGER_CONSTANT	shift, and go to state 417
    REAL_CONSTANT	shift, and go to state 418
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 419

    paren_ref	go to state 183
    string	go to state 420
    substring	go to state 120
    value_element	go to state 511
    value_atom	go to state 423



state 481

    value_element  ->  value_atom STAR . value_atom   (rule 232)

    INTEGER_CONSTANT	shift, and go to state 417
    REAL_CONSTANT	shift, and go to state 418
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 419

    paren_ref	go to state 183
    string	go to state 420
    substring	go to state 120
    value_atom	go to state 512



state 482

    include_statement  ->  INCLUDE_T L_PAREN PASS_TEXT R_PAREN QUOTE END_OF_STATEMENT .   (rule 106)

    $default	reduce using rule 106 (include_statement)



state 483

    include_statement  ->  INCLUDE_T pass_text L_PAREN PASS_TEXT R_PAREN QUOTE . END_OF_STATEMENT   (rule 107)

    END_OF_STATEMENT	shift, and go to state 513



state 484

    encode_decode_statement  ->  ENCODE_DECODE L_PAREN expression COMMA format_spec COMMA . encode_optional R_PAREN pass_text END_OF_STATEMENT   (rule 82)
    encode_decode_statement  ->  ENCODE_DECODE L_PAREN expression COMMA format_spec COMMA . encode_optional R_PAREN END_OF_STATEMENT   (rule 83)

    VARIABLE_NAME	shift, and go to state 514

    encode_optional	go to state 515
    encode_optional2	go to state 516
    paren_ref	go to state 517
    substring	go to state 518



state 485

    dimension_list  ->  dimension_list COMMA dimension_element .   (rule 209)

    $default	reduce using rule 209 (dimension_list)



state 486

    dimension_element  ->  dimension_atom COLON dimension_atom .   (rule 211)
    dimension_atom  ->  dimension_atom . operation INTEGER_CONSTANT   (rule 214)
    dimension_atom  ->  dimension_atom . operation VARIABLE_NAME   (rule 215)

    STAR	shift, and go to state 105
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    $default	reduce using rule 211 (dimension_element)

    operation	go to state 436



state 487

    dimension_atom  ->  dimension_atom operation INTEGER_CONSTANT .   (rule 214)

    $default	reduce using rule 214 (dimension_atom)



state 488

    dimension_atom  ->  dimension_atom operation VARIABLE_NAME .   (rule 215)

    $default	reduce using rule 215 (dimension_atom)



state 489

    paren_ref  ->  VARIABLE_NAME L_PAREN COMMA arg_list COMMA R_PAREN .   (rule 130)

    $default	reduce using rule 130 (paren_ref)



state 490

    arg_list  ->  arg_list COMMA COMMA expression .   (rule 123)
    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)

    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 123 (arg_list)



state 491

    substring  ->  VARIABLE_NAME L_PAREN expression COLON expression R_PAREN .   (rule 164)

    $default	reduce using rule 164 (substring)



state 492

    implicit_specifier_code  ->  CHAR DASH CHAR .   (rule 190)

    $default	reduce using rule 190 (implicit_specifier_code)



state 493

    implicit_specifier_code_list  ->  implicit_specifier_code COMMA implicit_specifier_code .   (rule 188)

    $default	reduce using rule 188 (implicit_specifier_code_list)



state 494

    equivalence_list  ->  equivalence_list COMMA L_PAREN equivalence_group R_PAREN .   (rule 199)

    $default	reduce using rule 199 (equivalence_list)



state 495

    base_function_name  ->  VARIABLE_NAME STAR L_PAREN STAR R_PAREN .   (rule 256)

    $default	reduce using rule 256 (base_function_name)



state 496

    subroutine_statement  ->  SUBROUTINE VARIABLE_NAME L_PAREN variable_list R_PAREN END_OF_STATEMENT .   (rule 263)

    $default	reduce using rule 263 (subroutine_statement)



state 497

    parameter_list  ->  parameter_list COMMA VARIABLE_NAME EQUALS . expression   (rule 275)

    INTEGER_CONSTANT	shift, and go to state 99
    REAL_CONSTANT	shift, and go to state 100
    L_PAREN	shift, and go to state 101
    STRING_START	shift, and go to state 102
    VARIABLE_NAME	shift, and go to state 103
    STAR	shift, and go to state 105
    REFERENCE	shift, and go to state 106
    CONCAT	shift, and go to state 107
    SLASH	shift, and go to state 108
    LOGICAL_NOT	shift, and go to state 109
    ADD_OP	shift, and go to state 110
    MUL_OP	shift, and go to state 214
    EXP_OP	shift, and go to state 112

    variable_reference	go to state 114
    paren_ref	go to state 115
    expression	go to state 519
    structure_ref	go to state 117
    operation	go to state 118
    string	go to state 119
    substring	go to state 120
    literal	go to state 121



state 498

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    vax_parameter_list  ->  vax_parameter_list COMMA VARIABLE_NAME EQUALS expression .   (rule 277)

    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 277 (vax_parameter_list)



state 499

    signed_integer  ->  INTEGER_CONSTANT .   (rule 43)

    $default	reduce using rule 43 (signed_integer)



state 500

    signed_integer  ->  ADD_OP . INTEGER_CONSTANT   (rule 44)

    INTEGER_CONSTANT	shift, and go to state 520



state 501

    global_function_statement  ->  GLOBAL_FUNCTION VARIABLE_NAME STAR VARIABLE_NAME STAR signed_integer . global_call_spec END_OF_STATEMENT   (rule 36)

    L_PAREN	shift, and go to state 290

    global_call_spec	go to state 521



state 502

    global_arg_item  ->  VARIABLE_NAME STAR signed_integer .   (rule 41)

    $default	reduce using rule 41 (global_arg_item)



state 503

    global_arg_list  ->  global_arg_list COMMA global_arg_item .   (rule 40)
    global_arg_item  ->  global_arg_item . COLON INTEGER_CONSTANT STAR INTEGER_CONSTANT   (rule 42)

    COLON	shift, and go to state 466

    $default	reduce using rule 40 (global_arg_list)



state 504

    global_arg_item  ->  global_arg_item COLON INTEGER_CONSTANT . STAR INTEGER_CONSTANT   (rule 42)

    STAR	shift, and go to state 522



state 505

    global_common_statement  ->  GLOBAL_COMMON SLASH VARIABLE_NAME SLASH global_common_list END_OF_STATEMENT .   (rule 46)

    $default	reduce using rule 46 (global_common_statement)



state 506

    global_common_item  ->  VARIABLE_NAME STAR INTEGER_CONSTANT . STAR INTEGER_CONSTANT   (rule 50)

    STAR	shift, and go to state 523



state 507

    if_statement  ->  base_if INTEGER_CONSTANT COMMA INTEGER_CONSTANT COMMA INTEGER_CONSTANT . END_OF_STATEMENT   (rule 53)

    END_OF_STATEMENT	shift, and go to state 524



state 508

    substring  ->  paren_ref L_PAREN expression COLON expression R_PAREN .   (rule 167)

    $default	reduce using rule 167 (substring)



state 509

    type_variable_item  ->  VARIABLE_NAME STAR L_PAREN STAR R_PAREN .   (rule 228)

    $default	reduce using rule 228 (type_variable_item)



state 510

    type_variable_item  ->  VARIABLE_NAME STAR L_PAREN expression R_PAREN .   (rule 227)

    $default	reduce using rule 227 (type_variable_item)



state 511

    value_list  ->  value_list COMMA value_element .   (rule 230)

    $default	reduce using rule 230 (value_list)



state 512

    value_element  ->  value_atom STAR value_atom .   (rule 232)

    $default	reduce using rule 232 (value_element)



state 513

    include_statement  ->  INCLUDE_T pass_text L_PAREN PASS_TEXT R_PAREN QUOTE END_OF_STATEMENT .   (rule 107)

    $default	reduce using rule 107 (include_statement)



state 514

    encode_optional2  ->  VARIABLE_NAME .   (rule 89)
    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list R_PAREN   (rule 127)
    paren_ref  ->  VARIABLE_NAME . L_PAREN R_PAREN   (rule 128)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list R_PAREN   (rule 129)
    paren_ref  ->  VARIABLE_NAME . L_PAREN COMMA arg_list COMMA R_PAREN   (rule 130)
    paren_ref  ->  VARIABLE_NAME . L_PAREN arg_list COMMA R_PAREN   (rule 131)
    substring  ->  VARIABLE_NAME . L_PAREN expression COLON expression R_PAREN   (rule 164)
    substring  ->  VARIABLE_NAME . L_PAREN COLON expression R_PAREN   (rule 165)
    substring  ->  VARIABLE_NAME . L_PAREN expression COLON R_PAREN   (rule 166)

    L_PAREN	shift, and go to state 149

    $default	reduce using rule 89 (encode_optional2)



state 515

    encode_decode_statement  ->  ENCODE_DECODE L_PAREN expression COMMA format_spec COMMA encode_optional . R_PAREN pass_text END_OF_STATEMENT   (rule 82)
    encode_decode_statement  ->  ENCODE_DECODE L_PAREN expression COMMA format_spec COMMA encode_optional . R_PAREN END_OF_STATEMENT   (rule 83)
    encode_optional  ->  encode_optional . COMMA VARIABLE_NAME EQUALS VARIABLE_NAME   (rule 87)
    encode_optional  ->  encode_optional . COMMA VARIABLE_NAME EQUALS INTEGER_CONSTANT   (rule 88)

    R_PAREN	shift, and go to state 525
    COMMA	shift, and go to state 526



state 516

    encode_optional  ->  encode_optional2 .   (rule 86)

    $default	reduce using rule 86 (encode_optional)



state 517

    encode_optional2  ->  paren_ref .   (rule 90)
    substring  ->  paren_ref . L_PAREN expression COLON expression R_PAREN   (rule 167)
    substring  ->  paren_ref . L_PAREN COLON expression R_PAREN   (rule 168)
    substring  ->  paren_ref . L_PAREN expression COLON R_PAREN   (rule 169)

    L_PAREN	shift, and go to state 192

    $default	reduce using rule 90 (encode_optional2)



state 518

    encode_optional2  ->  substring .   (rule 91)

    $default	reduce using rule 91 (encode_optional2)



state 519

    expression  ->  expression . ADD_OP expression   (rule 139)
    expression  ->  expression . MUL_OP expression   (rule 140)
    expression  ->  expression . LOGICAL_OP expression   (rule 141)
    expression  ->  expression . EXP_OP expression   (rule 143)
    expression  ->  expression . CONCAT expression   (rule 144)
    parameter_list  ->  parameter_list COMMA VARIABLE_NAME EQUALS expression .   (rule 275)

    CONCAT	shift, and go to state 223
    LOGICAL_OP	shift, and go to state 224
    ADD_OP	shift, and go to state 225
    MUL_OP	shift, and go to state 226
    EXP_OP	shift, and go to state 227

    $default	reduce using rule 275 (parameter_list)



state 520

    signed_integer  ->  ADD_OP INTEGER_CONSTANT .   (rule 44)

    $default	reduce using rule 44 (signed_integer)



state 521

    global_function_statement  ->  GLOBAL_FUNCTION VARIABLE_NAME STAR VARIABLE_NAME STAR signed_integer global_call_spec . END_OF_STATEMENT   (rule 36)

    END_OF_STATEMENT	shift, and go to state 527



state 522

    global_arg_item  ->  global_arg_item COLON INTEGER_CONSTANT STAR . INTEGER_CONSTANT   (rule 42)

    INTEGER_CONSTANT	shift, and go to state 528



state 523

    global_common_item  ->  VARIABLE_NAME STAR INTEGER_CONSTANT STAR . INTEGER_CONSTANT   (rule 50)

    INTEGER_CONSTANT	shift, and go to state 529



state 524

    if_statement  ->  base_if INTEGER_CONSTANT COMMA INTEGER_CONSTANT COMMA INTEGER_CONSTANT END_OF_STATEMENT .   (rule 53)

    $default	reduce using rule 53 (if_statement)



state 525

    encode_decode_statement  ->  ENCODE_DECODE L_PAREN expression COMMA format_spec COMMA encode_optional R_PAREN . pass_text END_OF_STATEMENT   (rule 82)
    encode_decode_statement  ->  ENCODE_DECODE L_PAREN expression COMMA format_spec COMMA encode_optional R_PAREN . END_OF_STATEMENT   (rule 83)

    END_OF_STATEMENT	shift, and go to state 530
    PASS_TEXT	shift, and go to state 88

    pass_text	go to state 531



state 526

    encode_optional  ->  encode_optional COMMA . VARIABLE_NAME EQUALS VARIABLE_NAME   (rule 87)
    encode_optional  ->  encode_optional COMMA . VARIABLE_NAME EQUALS INTEGER_CONSTANT   (rule 88)

    VARIABLE_NAME	shift, and go to state 532



state 527

    global_function_statement  ->  GLOBAL_FUNCTION VARIABLE_NAME STAR VARIABLE_NAME STAR signed_integer global_call_spec END_OF_STATEMENT .   (rule 36)

    $default	reduce using rule 36 (global_function_statement)



state 528

    global_arg_item  ->  global_arg_item COLON INTEGER_CONSTANT STAR INTEGER_CONSTANT .   (rule 42)

    $default	reduce using rule 42 (global_arg_item)



state 529

    global_common_item  ->  VARIABLE_NAME STAR INTEGER_CONSTANT STAR INTEGER_CONSTANT .   (rule 50)

    $default	reduce using rule 50 (global_common_item)



state 530

    encode_decode_statement  ->  ENCODE_DECODE L_PAREN expression COMMA format_spec COMMA encode_optional R_PAREN END_OF_STATEMENT .   (rule 83)

    $default	reduce using rule 83 (encode_decode_statement)



state 531

    encode_decode_statement  ->  ENCODE_DECODE L_PAREN expression COMMA format_spec COMMA encode_optional R_PAREN pass_text . END_OF_STATEMENT   (rule 82)
    pass_text  ->  pass_text . PASS_TEXT   (rule 119)

    END_OF_STATEMENT	shift, and go to state 533
    PASS_TEXT	shift, and go to state 206



state 532

    encode_optional  ->  encode_optional COMMA VARIABLE_NAME . EQUALS VARIABLE_NAME   (rule 87)
    encode_optional  ->  encode_optional COMMA VARIABLE_NAME . EQUALS INTEGER_CONSTANT   (rule 88)

    EQUALS	shift, and go to state 534



state 533

    encode_decode_statement  ->  ENCODE_DECODE L_PAREN expression COMMA format_spec COMMA encode_optional R_PAREN pass_text END_OF_STATEMENT .   (rule 82)

    $default	reduce using rule 82 (encode_decode_statement)



state 534

    encode_optional  ->  encode_optional COMMA VARIABLE_NAME EQUALS . VARIABLE_NAME   (rule 87)
    encode_optional  ->  encode_optional COMMA VARIABLE_NAME EQUALS . INTEGER_CONSTANT   (rule 88)

    INTEGER_CONSTANT	shift, and go to state 535
    VARIABLE_NAME	shift, and go to state 536



state 535

    encode_optional  ->  encode_optional COMMA VARIABLE_NAME EQUALS INTEGER_CONSTANT .   (rule 88)

    $default	reduce using rule 88 (encode_optional)



state 536

    encode_optional  ->  encode_optional COMMA VARIABLE_NAME EQUALS VARIABLE_NAME .   (rule 87)

    $default	reduce using rule 87 (encode_optional)



state 537

    $   	go to state 538



state 538

    $default	accept
